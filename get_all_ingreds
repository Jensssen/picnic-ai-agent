{
	"id": "js-recipe-details-page",
	"header": {
		"type": "STATIC",
		"title": "Bacon Cheeseburger mit Pommes"
	},
	"presentation": {
		"type": "FULL_SCREEN",
		"behavior": {
			"keepAwake": true
		}
	},
	"analytics": {
		"contexts": [{
			"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
			"data": {
				"recipe_id": "66864e469a2ba07f8c321c8b",
				"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
			}
		}]
	},
	"body": {
		"type": "STATE_BOUNDARY",
		"id": "GlobalState",
		"state": {},
		"child": {
			"id": "RecipeDetailsPageState",
			"state": {
				"basketModificationOngoingState": false,
				"focusedTabIdState": "ingredients",
				"servingsState": 4
			},
			"type": "STATE_BOUNDARY",
			"child": {
				"id": "root",
				"layout": {
					"type": "FLOW",
					"axis": "VERTICAL",
					"overflow": "HIDDEN",
					"backgroundColor": "#ffffff"
				},
				"size": {
					"crossAxis": "12g",
					"mainAxis": "SCREEN_HEIGHT"
				},
				"type": "BLOCK",
				"children": [{
					"id": "root-content",
					"layout": {
						"type": "FLOW",
						"axis": "VERTICAL",
						"backgroundColor": "#ffffff",
						"estimatedItemSize": {
							"type": "EXPRESSION",
							"expression": "CONTAINER_HEIGHT"
						},
						"padding": {
							"bottom": 55
						}
					},
					"size": {
						"crossAxis": "12g",
						"mainAxis": "CONTAINER_HEIGHT - SAFE_AREA_TOP - DEFAULT_STICKY_HEADER_HEIGHT"
					},
					"type": "BLOCK",
					"children": [{
						"id": "RecipeState",
						"state": {
							"saved": {
								"66864e469a2ba07f8c321c8b": false
							}
						},
						"type": "STATE_BOUNDARY",
						"child": {
							"type": "PML",
							"id": "recipe-details-header",
							"size": {
								"crossAxis": "12g"
							},
							"pml": {
								"pmlVersion": "0.1.0",
								"images": {},
								"component": {
									"axis": "VERTICAL",
									"spacing": 8,
									"padding": {
										"bottom": 14
									},
									"type": "STACK",
									"children": [{
										"axis": "VERTICAL",
										"type": "STACK",
										"children": [{
											"source": {
												"id": "recipes/3779c50e332243a4d80298d112d84ab1a03747873770be936c29f21a791cbde5"
											},
											"resizeMode": "COVER",
											"width": "100%",
											"aspectRatio": 1,
											"derivativeType": "filled",
											"extension": "webp",
											"placeholder": "NONE",
											"type": "IMAGE"
										}, {
											"absolutePosition": {
												"bottom": 0
											},
											"width": "100%",
											"borderRadius": {
												"topLeft": 16,
												"topRight": 16
											},
											"backgroundColor": "#ffffff",
											"height": 16,
											"type": "CONTAINER",
											"child": null
										}, {
											"height": 40,
											"width": "100%",
											"absolutePosition": {
												"top": 8
											},
											"type": "CONTAINER",
											"child": {
												"axis": "HORIZONTAL",
												"height": "100%",
												"spacing": 8,
												"distribution": "END",
												"padding": {
													"right": 8
												},
												"type": "STACK",
												"children": [{
													"height": 40,
													"width": 40,
													"type": "CONTAINER",
													"child": {
														"testID": "RecipeDetails.FavoriteButton",
														"accessibilityLabel": {
															"type": "EXPRESSION",
															"expression": "(() => {\n                      const isSaved = false ? GlobalState.isSaved :  false\n                      const id =  false ? GlobalState.id :  '66864e469a2ba07f8c321c8b'\n                      if (!GlobalState.saved || typeof GlobalState.saved[id] === \"undefined\") {\n                         return isSaved ? 'heartFilled' : 'heart'\n                      } else if (typeof GlobalState.saved[id] === \"boolean\") {\n                          return GlobalState.saved[id] ? 'Tippe zwei Mal, um das Rezept zu speichern' : 'Tippe zwei Mal, um das Rezept aus den gespeicherten Rezepten zu entfernen'\n                      }\n                    })()"
														},
														"onPress": {
															"type": "EXPRESSION",
															"expression": "()=> {\n        const isSavedValue = false ? GlobalState?.isSaved :  false\n        const id =  false ? GlobalState?.id :  '66864e469a2ba07f8c321c8b'\n\n        if (!GlobalState.saved) {\n           GlobalState.saved = {};\n        }\n        if (!GlobalState.recipeLikeTimeouts) {\n           GlobalState.recipeLikeTimeouts = {};\n        }\n        \n        if (GlobalState.recipeLikeTimeouts[id]) {\n            clearTimeout(GlobalState.recipeLikeTimeouts[id]);\n        }\n        \n        if (typeof GlobalState.saved[id] === \"boolean\") {\n            GlobalState.saved[id] = !GlobalState.saved[id];\n        } else {\n            GlobalState.saved[id] = !isSavedValue;\n        }\n        \n        const isSaved = GlobalState.saved?.[id];\n        \n        const saveAction = {\n            \"actionType\": \"ENDPOINT\",\n            \"method\": \"post\",\n            \"url\": \"pages/task/recipe-saving\",\n            \"body\": {\n                \"payload\": {\n                \"recipe_id\": id, \n                \"saved_at\": '2025-01-08T22:05:32.676Z'\n                }\n            },\n            \"onSuccess\": {\n                \"actionType\": \"CALLBACK\",\n                \"callback\": () => {\n                    onPMLAction({\n                    \"actionType\": \"EVENT\",\n                    \"action\": {\n                        \"type\": \"REFRESH\",\n                        \"source\": \"BACKGROUND_PAGES\",\n                        \"onNext\": {\n                            \"actionType\": \"EVENT\",\n                            \"action\": {\n                                \"type\": \"SNACKBAR\",\n                                \"isVisible\": true,\n                                \"message\":  \"Gespeichert ☑️\",\n                                ...({\"pageId\":\"see-more-recipes-page\",\"params\":{\"segmentName\":\"Favoriten\",\"segmentType\":\"SAVED_RECIPES\"}})\n                            }\n                        }\n                    }\n                            });\n                   \n                    if(false){\n                        onPMLAction({\"actionType\":\"RELOAD\",\"suspenseId\":\"cookbook-suspense-id\"});\n                    }\n                }\n            }\n        };\n\n        const unsaveAction = {\n            \"actionType\": \"ENDPOINT\",\n            \"method\": \"post\",\n            \"url\": \"pages/task/recipe-saving\",\n            \"body\": {\n                \"payload\": {\n                \"recipe_id\": id, \n                \"saved_at\": null \n                }\n            },\n            \"onSuccess\": {\n                \"actionType\": \"EVENT\",\n                \"action\": {\n                    \"type\": \"REFRESH\",\n                    \"source\": \"BACKGROUND_PAGES\",\n                    \"onNext\": {\n                        \"actionType\": \"EVENT\",\n                        \"action\": {\n                            \"type\": \"SNACKBAR\",\n                            \"isVisible\": false\n                        }\n                    }\n                }\n            }\n        };\n\n        const action = isSaved ? saveAction : unsaveAction;\n        \n        const analyticsContext = [\n            {\n                \"schema\": \"iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-1-0\",\n                    \"data\": {\n                        \"recipe_id\":  id\n                    }\n            }\n        ]\n\n        const analyticsEvent = {\n            \"schema\": \"iglu:nl.picnic.snowplow/generic_action/jsonschema/1-0-0\",\n            \"data\": {\n                \"target\": \"save_recipe_button\",\n                \"action\": GlobalState.saved?.[id] ? \"toggle\" : \"untoggle\"\n            }\n        }\n        \n        GlobalState.recipeLikeTimeouts[id] = setTimeout(() => {\n          onPMLAction(action, analyticsContext, analyticsEvent);\n        }, 500);\n    }"
														},
														"type": "TOUCHABLE",
														"child": {
															"axis": "VERTICAL",
															"height": 40,
															"width": 40,
															"alignment": "CENTER",
															"distribution": "CENTER",
															"type": "STACK",
															"children": [{
																"backgroundColor": "#ffffff",
																"borderRadius": 20,
																"height": "100%",
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"axis": "VERTICAL",
																	"alignment": "CENTER",
																	"distribution": "CENTER",
																	"height": "100%",
																	"width": "100%",
																	"type": "STACK",
																	"children": [{
																		"iconKey": {
																			"type": "EXPRESSION",
																			"expression": "(() => {\n                      const isSaved = false ? GlobalState.isSaved :  false\n                      const id =  false ? GlobalState.id :  '66864e469a2ba07f8c321c8b'\n                      if (!GlobalState.saved || typeof GlobalState.saved[id] === \"undefined\") {\n                         return isSaved ? 'heartFilled' : 'heart'\n                      } else if (typeof GlobalState.saved[id] === \"boolean\") {\n                          return GlobalState.saved[id] ? 'heartFilled' : 'heart'\n                      }\n                    })()"
																		},
																		"width": 24,
																		"aspectRatio": 1,
																		"color": {
																			"type": "EXPRESSION",
																			"expression": "(() => {\n                      const isSaved = false ? GlobalState.isSaved :  false\n                      const id =  false ? GlobalState.id :  '66864e469a2ba07f8c321c8b'\n                      if (!GlobalState.saved || typeof GlobalState.saved[id] === \"undefined\") {\n                         return isSaved ? 'heartFilled' : 'heart'\n                      } else if (typeof GlobalState.saved[id] === \"boolean\") {\n                          return GlobalState.saved[id] ? '#e1171e' : '#333333'\n                      }\n                    })()"
																		},
																		"type": "ICON"
																	}]
																}
															}]
														}
													}
												}, {
													"height": 40,
													"width": 40,
													"type": "CONTAINER",
													"child": {
														"onPress": {
															"type": "EXPRESSION",
															"expression": "() => {\n              onPMLAction(\n                {\n                  \"actionType\": \"EVENT\",\n                  \"action\": {\n                    \"type\": \"SOCIAL_SHARE\",\n                    \"message\": \"Ich habe bei Picnic dieses leckere Rezept gefunden: 'Bacon Cheeseburger mit Pommes'. Probier’s doch mal aus: https://picnic.app/de/go/g2vbxrv\"\n                  }\n                },\n                [{\"schema\":\"iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0\",\"data\":{\"type\":\"recipe_share_button\",\"template_id\":\"recipe-details-header-share-button\"}},{\"schema\":\"iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0\",\"data\":{\"recipe_id\":\"66864e469a2ba07f8c321c8b\"}}]\n              );\n            }"
														},
														"type": "TOUCHABLE",
														"child": {
															"axis": "VERTICAL",
															"height": 40,
															"width": 40,
															"alignment": "CENTER",
															"distribution": "CENTER",
															"type": "STACK",
															"children": [{
																"backgroundColor": "#ffffff",
																"borderRadius": 20,
																"height": "100%",
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"axis": "VERTICAL",
																	"alignment": "CENTER",
																	"distribution": "CENTER",
																	"height": "100%",
																	"width": "100%",
																	"type": "STACK",
																	"children": [{
																		"iconKey": "shareIcon",
																		"fallback": {
																			"id": "picnic-page/53887ac4bc0592340f2c907446e710c8e8e8aa71ceeac51968338d0c717b6634"
																		},
																		"width": 16,
																		"height": 17,
																		"type": "ICON"
																	}]
																}
															}]
														}
													}
												}]
											}
										}]
									}, {
										"axis": "VERTICAL",
										"padding": {
											"left": 16,
											"right": 16
										},
										"spacing": 4,
										"type": "STACK",
										"children": [{
											"textAttributes": {
												"size": 14,
												"weight": "MEDIUM",
												"color": "#295813"
											},
											"markdown": "Genießen am Wochenende",
											"numberOfLines": 1,
											"type": "RICH_TEXT"
										}, {
											"textAttributes": {
												"size": 28,
												"weight": "SEMIBOLD",
												"color": "#333333"
											},
											"markdown": "Bacon Cheeseburger mit Pommes",
											"type": "RICH_TEXT"
										}]
									}]
								}
							}
						}
					}, {
						"id": "recipe-portioning-content-wrapper",
						"suspenseId": "recipe-portioning-content-suspense-id-66864e469a2ba07f8c321c8b",
						"child": {
							"id": "RecipePortioningContentState",
							"state": {
								"coreIngredientsState": [{
									"ingredient_id": "9ae133a6-0aa9-4afe-8d13-7dc27107f26b",
									"selling_unit_id": "s1020324",
									"name": "Pommes",
									"ingredient_type": "CORE",
									"order": 10,
									"selling_unit_quantity": 1,
									"written_quantity": "1 Packung",
									"display_ingredient_quantity": 1.0,
									"display_unit_of_measurement": "Packung",
									"availability_status": "AVAILABLE"
								}, {
									"ingredient_id": "bfce232e-f464-4235-9fe2-448b5289265c",
									"selling_unit_id": "s1029657",
									"name": "Cheddar",
									"ingredient_type": "CORE",
									"order": 35,
									"selling_unit_quantity": 1,
									"written_quantity": "4 Scheiben",
									"display_ingredient_quantity": 4.0,
									"display_unit_of_measurement": "Scheiben",
									"availability_status": "AVAILABLE"
								}, {
									"ingredient_id": "61a121e4-f184-4ba4-a2d4-313e45785dd9",
									"selling_unit_id": "s1022167",
									"name": "Bacon",
									"ingredient_type": "CORE",
									"order": 40,
									"selling_unit_quantity": 1,
									"written_quantity": "4 Scheiben",
									"display_ingredient_quantity": 4.0,
									"display_unit_of_measurement": "Scheiben",
									"availability_status": "AVAILABLE"
								}, {
									"ingredient_id": "7e95f73e-2590-493b-bb50-7cbcd0260df0",
									"selling_unit_id": "s1057181",
									"name": "Burger-Patties",
									"ingredient_type": "CORE",
									"order": 60,
									"selling_unit_quantity": 2,
									"written_quantity": "4 Stk.",
									"display_ingredient_quantity": 4.0,
									"display_unit_of_measurement": "Stk.",
									"availability_status": "AVAILABLE"
								}, {
									"ingredient_id": "4e8b7d93-9486-4d02-9a73-2690c018a7e0",
									"selling_unit_id": "s1024110",
									"name": "Burgerbrötchen",
									"ingredient_type": "CORE",
									"order": 70,
									"selling_unit_quantity": 1,
									"written_quantity": "4 Stk.",
									"display_ingredient_quantity": 4.0,
									"display_unit_of_measurement": "Stk.",
									"availability_status": "AVAILABLE"
								}, {
									"ingredient_id": "e222f63e-dffa-4d59-b9a2-33979f6cb8af",
									"selling_unit_id": "s1131727",
									"name": "Ketchup",
									"ingredient_type": "CORE",
									"order": 80,
									"selling_unit_quantity": 1,
									"written_quantity": "4 TL",
									"display_ingredient_quantity": 4.0,
									"display_unit_of_measurement": "TL",
									"availability_status": "AVAILABLE"
								}, {
									"ingredient_id": "8ab63da1-65bc-40d9-813c-08c674fc4c2f",
									"selling_unit_id": "s1026198",
									"name": "Mayonnaise",
									"ingredient_type": "CORE",
									"order": 90,
									"selling_unit_quantity": 1,
									"written_quantity": "20 g",
									"display_ingredient_quantity": 20.0,
									"display_unit_of_measurement": "g",
									"availability_status": "AVAILABLE"
								}, {
									"ingredient_id": "038e43e0-4f9f-4f4e-9401-fc90f3600ba4",
									"selling_unit_id": "s1028776",
									"name": "Rucola",
									"ingredient_type": "CORE",
									"order": 100,
									"selling_unit_quantity": 1,
									"written_quantity": "20 g",
									"display_ingredient_quantity": 20.0,
									"display_unit_of_measurement": "g",
									"availability_status": "AVAILABLE"
								}],
								"reloadOngoingState": false
							},
							"type": "STATE_BOUNDARY",
							"child": {
								"id": "recipe-portioning-content-container",
								"layout": {
									"type": "FLOW",
									"axis": "VERTICAL"
								},
								"size": {
									"crossAxis": "12g"
								},
								"type": "BLOCK",
								"children": [{
									"type": "PML",
									"id": "recipe-description-section",
									"size": {
										"crossAxis": "12g"
									},
									"pml": {
										"pmlVersion": "0.1.0",
										"images": {},
										"component": {
											"axis": "VERTICAL",
											"alignment": "FILL",
											"spacing": 40,
											"padding": {
												"right": 16,
												"left": 16,
												"bottom": 16
											},
											"type": "STACK",
											"children": [{
												"type": "CONTAINER",
												"child": {
													"textAttributes": {
														"size": 16,
														"weight": "REGULAR",
														"color": "#333333"
													},
													"markdown": "Schicht für Schicht ein Genuss: Der Cheeseburger mit krossem Bacon und zartschmelzendem Käse.",
													"type": "RICH_TEXT"
												}
											}, {
												"axis": "HORIZONTAL",
												"distribution": "SPACE_AROUND",
												"alignment": "CENTER",
												"padding": {
													"bottom": 12
												},
												"type": "STACK",
												"children": [{
													"axis": "VERTICAL",
													"spacing": 4,
													"alignment": "CENTER",
													"width": "100%",
													"type": "STACK",
													"children": [{
														"markdown": "25 min",
														"numberOfLines": 1,
														"textAttributes": {
															"size": 24,
															"weight": "SEMIBOLD",
															"color": "#333333"
														},
														"type": "RICH_TEXT"
													}, {
														"markdown": "Gesamt",
														"numberOfLines": 1,
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"type": "RICH_TEXT"
													}]
												}, {
													"axis": "VERTICAL",
													"alignment": "CENTER",
													"distribution": "CENTER",
													"height": "100%",
													"width": 20,
													"type": "STACK",
													"children": [{
														"width": 2,
														"height": 20,
														"backgroundColor": "#f8f5f2",
														"borderRadius": 15,
														"type": "CONTAINER",
														"child": null
													}]
												}, {
													"axis": "VERTICAL",
													"spacing": 4,
													"alignment": "CENTER",
													"width": "100%",
													"type": "STACK",
													"children": [{
														"markdown": "20 min",
														"numberOfLines": 1,
														"textAttributes": {
															"size": 24,
															"weight": "SEMIBOLD",
															"color": "#333333"
														},
														"type": "RICH_TEXT"
													}, {
														"markdown": "Zubereitung",
														"numberOfLines": 1,
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"type": "RICH_TEXT"
													}]
												}, {
													"axis": "VERTICAL",
													"alignment": "CENTER",
													"distribution": "CENTER",
													"height": "100%",
													"width": 20,
													"type": "STACK",
													"children": [{
														"width": 2,
														"height": 20,
														"backgroundColor": "#f8f5f2",
														"borderRadius": 15,
														"type": "CONTAINER",
														"child": null
													}]
												}, {
													"axis": "VERTICAL",
													"spacing": 4,
													"alignment": "CENTER",
													"width": "100%",
													"type": "STACK",
													"children": [{
														"axis": "HORIZONTAL",
														"type": "STACK",
														"children": [{
															"textAttributes": {
																"size": 24,
																"weight": "SEMIBOLD",
																"color": "#333333"
															},
															"numberOfLines": 1,
															"markdown": "6.30 €",
															"type": "RICH_TEXT"
														}]
													}, {
														"markdown": "pro Portion",
														"numberOfLines": 1,
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"type": "RICH_TEXT"
													}]
												}]
											}]
										}
									}
								}, {
									"type": "PML",
									"id": "recipe-core-ingredients-details-section",
									"size": {
										"crossAxis": "12g"
									},
									"pml": {
										"pmlVersion": "0.1.0",
										"images": {},
										"component": {
											"axis": "VERTICAL",
											"alignment": "FILL",
											"padding": {
												"right": 16,
												"left": 16
											},
											"type": "STACK",
											"children": [{
												"backgroundColor": "#f8f5f2",
												"height": 2,
												"borderRadius": 5,
												"type": "CONTAINER",
												"child": null
											}, {
												"padding": {
													"top": 24,
													"bottom": 4
												},
												"type": "CONTAINER",
												"child": {
													"axis": "VERTICAL",
													"type": "STACK",
													"children": [{
														"textAlignment": "START",
														"numberOfLines": 1,
														"textAttributes": {
															"size": 20,
															"weight": "SEMIBOLD",
															"color": "#333333"
														},
														"markdown": "Zutaten",
														"type": "RICH_TEXT"
													}, {
														"textAlignment": "START",
														"numberOfLines": 1,
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"markdown": "Für 4 Portionen",
														"type": "RICH_TEXT"
													}]
												}
											}, {
												"axis": "HORIZONTAL",
												"padding": {
													"top": 16,
													"bottom": 16
												},
												"wrap": "WRAP",
												"type": "STACK",
												"children": [{
													"axis": "VERTICAL",
													"alignment": "START",
													"width": "50%",
													"height": 64,
													"padding": {
														"right": 6,
														"left": 0
													},
													"type": "STACK",
													"children": [{
														"textAttributes": {
															"size": 16,
															"weight": "MEDIUM",
															"color": "#333333"
														},
														"numberOfLines": 2,
														"markdown": "Pommes",
														"type": "RICH_TEXT"
													}, {
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"numberOfLines": 1,
														"markdown": "1 Packung",
														"type": "RICH_TEXT"
													}]
												}, {
													"axis": "VERTICAL",
													"alignment": "START",
													"width": "50%",
													"height": 64,
													"padding": {
														"right": 0,
														"left": 6
													},
													"type": "STACK",
													"children": [{
														"textAttributes": {
															"size": 16,
															"weight": "MEDIUM",
															"color": "#333333"
														},
														"numberOfLines": 2,
														"markdown": "Cheddar",
														"type": "RICH_TEXT"
													}, {
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"numberOfLines": 1,
														"markdown": "4 Scheiben",
														"type": "RICH_TEXT"
													}]
												}, {
													"axis": "VERTICAL",
													"alignment": "START",
													"width": "50%",
													"height": 64,
													"padding": {
														"right": 6,
														"left": 0
													},
													"type": "STACK",
													"children": [{
														"textAttributes": {
															"size": 16,
															"weight": "MEDIUM",
															"color": "#333333"
														},
														"numberOfLines": 2,
														"markdown": "Bacon",
														"type": "RICH_TEXT"
													}, {
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"numberOfLines": 1,
														"markdown": "4 Scheiben",
														"type": "RICH_TEXT"
													}]
												}, {
													"axis": "VERTICAL",
													"alignment": "START",
													"width": "50%",
													"height": 64,
													"padding": {
														"right": 0,
														"left": 6
													},
													"type": "STACK",
													"children": [{
														"textAttributes": {
															"size": 16,
															"weight": "MEDIUM",
															"color": "#333333"
														},
														"numberOfLines": 2,
														"markdown": "Burger-Patties",
														"type": "RICH_TEXT"
													}, {
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"numberOfLines": 1,
														"markdown": "4 Stk.",
														"type": "RICH_TEXT"
													}]
												}, {
													"axis": "VERTICAL",
													"alignment": "START",
													"width": "50%",
													"height": 64,
													"padding": {
														"right": 6,
														"left": 0
													},
													"type": "STACK",
													"children": [{
														"textAttributes": {
															"size": 16,
															"weight": "MEDIUM",
															"color": "#333333"
														},
														"numberOfLines": 2,
														"markdown": "Burgerbrötchen",
														"type": "RICH_TEXT"
													}, {
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"numberOfLines": 1,
														"markdown": "4 Stk.",
														"type": "RICH_TEXT"
													}]
												}, {
													"axis": "VERTICAL",
													"alignment": "START",
													"width": "50%",
													"height": 64,
													"padding": {
														"right": 0,
														"left": 6
													},
													"type": "STACK",
													"children": [{
														"textAttributes": {
															"size": 16,
															"weight": "MEDIUM",
															"color": "#333333"
														},
														"numberOfLines": 2,
														"markdown": "Ketchup",
														"type": "RICH_TEXT"
													}, {
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"numberOfLines": 1,
														"markdown": "4 TL",
														"type": "RICH_TEXT"
													}]
												}, {
													"axis": "VERTICAL",
													"alignment": "START",
													"width": "50%",
													"height": 64,
													"padding": {
														"right": 6,
														"left": 0
													},
													"type": "STACK",
													"children": [{
														"textAttributes": {
															"size": 16,
															"weight": "MEDIUM",
															"color": "#333333"
														},
														"numberOfLines": 2,
														"markdown": "Mayonnaise",
														"type": "RICH_TEXT"
													}, {
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"numberOfLines": 1,
														"markdown": "20 g",
														"type": "RICH_TEXT"
													}]
												}, {
													"axis": "VERTICAL",
													"alignment": "START",
													"width": "50%",
													"height": 64,
													"padding": {
														"right": 0,
														"left": 6
													},
													"type": "STACK",
													"children": [{
														"textAttributes": {
															"size": 16,
															"weight": "MEDIUM",
															"color": "#333333"
														},
														"numberOfLines": 2,
														"markdown": "Rucola",
														"type": "RICH_TEXT"
													}, {
														"textAttributes": {
															"size": 14,
															"weight": "REGULAR",
															"color": "#333333"
														},
														"numberOfLines": 1,
														"markdown": "20 g",
														"type": "RICH_TEXT"
													}]
												}]
											}, {
												"backgroundColor": "#f8f5f2",
												"height": 2,
												"borderRadius": 5,
												"type": "CONTAINER",
												"child": null
											}]
										}
									}
								}, {
									"type": "PML",
									"id": "recipe-ingredients-utensils",
									"size": {
										"crossAxis": "12g"
									},
									"pml": {
										"pmlVersion": "0.1.0",
										"images": {},
										"component": {
											"axis": "VERTICAL",
											"padding": {
												"left": 16,
												"right": 16,
												"bottom": 24
											},
											"type": "STACK",
											"children": [{
												"padding": {
													"top": 12,
													"bottom": 12
												},
												"type": "CONTAINER",
												"child": {
													"backgroundColor": "#EDEDED",
													"height": 1,
													"type": "CONTAINER",
													"child": null
												}
											}, {
												"axis": "VERTICAL",
												"spacing": 8,
												"type": "STACK",
												"children": [{
													"textAlignment": "START",
													"textAttributes": {
														"size": 16,
														"weight": "REGULAR",
														"color": "#333333"
													},
													"markdown": "**Eigene Zutaten:** Salz, Pfeffer und 2 EL Sonnenblumenöl",
													"type": "RICH_TEXT"
												}, {
													"textAlignment": "START",
													"textAttributes": {
														"size": 16,
														"weight": "REGULAR",
														"color": "#333333"
													},
													"markdown": "**Du benötigst:** Bratpfanne, Ofen",
													"type": "RICH_TEXT"
												}]
											}]
										}
									}
								}, {
									"id": "recipe-content-tabs-container",
									"size": {
										"crossAxis": "SCREEN_WIDTH",
										"mainAxis": 65
									},
									"analytics": {
										"contexts": [{
											"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
											"data": {
												"recipe_id": "66864e469a2ba07f8c321c8b",
												"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
											}
										}]
									},
									"layout": {
										"type": "FLOW",
										"axis": "HORIZONTAL"
									},
									"type": "BLOCK",
									"children": [{
										"type": "PML",
										"id": "recipe-content-tabs-item-ingredients",
										"size": {
											"crossAxis": "12g",
											"mainAxis": "SCREEN_WIDTH / 2"
										},
										"pml": {
											"pmlVersion": "0.1.0",
											"images": {},
											"component": {
												"testID": "RecipeDetailsPage.TabItem.ingredients",
												"accessible": true,
												"hideFromAccessibility": true,
												"onPress": {
													"type": "EXPRESSION",
													"expression": "() => {\n            if (RecipeDetailsPageState.focusedTabIdState === `ingredients`) return;\n            RecipeDetailsPageState.focusedTabIdState = `ingredients`;\n          }"
												},
												"activeOpacity": 0.5,
												"hitSlop": {
													"vertical": 4,
													"horizontal": 4
												},
												"type": "TOUCHABLE",
												"child": {
													"height": 65,
													"width": "100%",
													"type": "CONTAINER",
													"child": {
														"axis": "VERTICAL",
														"distribution": "SPACE_BETWEEN",
														"alignment": "CENTER",
														"spacing": 4,
														"padding": {
															"top": 8,
															"bottom": 8
														},
														"type": "STACK",
														"children": [{
															"iconKey": "leafOutlined",
															"width": 24,
															"height": 24,
															"color": {
																"type": "EXPRESSION",
																"expression": "RecipeDetailsPageState.focusedTabIdState ===`ingredients` ? '#295813' : '#5b534e'"
															},
															"type": "ICON"
														}, {
															"textAlignment": "CENTER",
															"textType": "SUBTITLE2",
															"markdown": {
																"type": "EXPRESSION",
																"expression": "(() => {\n                  const selected = RecipeDetailsPageState.focusedTabIdState ===`ingredients`;\n                  const color = `#(${selected ? '#295813' : '#5b534e'})`;\n                  return `${color}Zutaten${color}`\n                })()"
															},
															"type": "RICH_TEXT"
														}, {
															"width": "100%",
															"height": 2,
															"borderRadius": 2,
															"hideFromAccessibility": true,
															"backgroundColor": {
																"type": "EXPRESSION",
																"expression": "RecipeDetailsPageState.focusedTabIdState ===`ingredients` ? '#295813' : '#f8f5f2'"
															},
															"absolutePosition": {
																"bottom": 0
															},
															"type": "CONTAINER",
															"child": null
														}]
													}
												}
											}
										}
									}, {
										"type": "PML",
										"id": "recipe-content-tabs-item-instructions",
										"size": {
											"crossAxis": "12g",
											"mainAxis": "SCREEN_WIDTH / 2"
										},
										"pml": {
											"pmlVersion": "0.1.0",
											"images": {},
											"component": {
												"testID": "RecipeDetailsPage.TabItem.instructions",
												"accessible": true,
												"hideFromAccessibility": true,
												"onPress": {
													"type": "EXPRESSION",
													"expression": "() => {\n            if (RecipeDetailsPageState.focusedTabIdState === `instructions`) return;\n            RecipeDetailsPageState.focusedTabIdState = `instructions`;\n          }"
												},
												"activeOpacity": 0.5,
												"hitSlop": {
													"vertical": 4,
													"horizontal": 4
												},
												"type": "TOUCHABLE",
												"child": {
													"height": 65,
													"width": "100%",
													"type": "CONTAINER",
													"child": {
														"axis": "VERTICAL",
														"distribution": "SPACE_BETWEEN",
														"alignment": "CENTER",
														"spacing": 4,
														"padding": {
															"top": 8,
															"bottom": 8
														},
														"type": "STACK",
														"children": [{
															"iconKey": "whisk",
															"width": 24,
															"height": 24,
															"color": {
																"type": "EXPRESSION",
																"expression": "RecipeDetailsPageState.focusedTabIdState ===`instructions` ? '#295813' : '#5b534e'"
															},
															"type": "ICON"
														}, {
															"textAlignment": "CENTER",
															"textType": "SUBTITLE2",
															"markdown": {
																"type": "EXPRESSION",
																"expression": "(() => {\n                  const selected = RecipeDetailsPageState.focusedTabIdState ===`instructions`;\n                  const color = `#(${selected ? '#295813' : '#5b534e'})`;\n                  return `${color}Zubereitung${color}`\n                })()"
															},
															"type": "RICH_TEXT"
														}, {
															"width": "100%",
															"height": 2,
															"borderRadius": 2,
															"hideFromAccessibility": true,
															"backgroundColor": {
																"type": "EXPRESSION",
																"expression": "RecipeDetailsPageState.focusedTabIdState ===`instructions` ? '#295813' : '#f8f5f2'"
															},
															"absolutePosition": {
																"bottom": 0
															},
															"type": "CONTAINER",
															"child": null
														}]
													}
												}
											}
										}
									}]
								}, {
									"id": "recipe-content-tabs-list-ingredients",
									"size": {
										"crossAxis": "12g"
									},
									"layout": {
										"type": "FLOW",
										"axis": "VERTICAL"
									},
									"analytics": {
										"contexts": [{
											"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
											"data": {
												"recipe_id": "66864e469a2ba07f8c321c8b",
												"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
											}
										}]
									},
									"isHidden": {
										"type": "EXPRESSION",
										"expression": "RecipeDetailsPageState.focusedTabIdState !== 'ingredients'"
									},
									"type": "BLOCK",
									"children": [{
										"id": "recipe-ingredients-selling-units-section",
										"size": {
											"crossAxis": "12g"
										},
										"layout": {
											"type": "FLOW",
											"axis": "VERTICAL",
											"padding": {
												"top": 16
											}
										},
										"type": "BLOCK",
										"children": [{
											"id": "recipe-details-selling-unit-list-section-new",
											"layout": {
												"type": "FLOW",
												"axis": "VERTICAL",
												"padding": {
													"left": 8,
													"right": 8
												}
											},
											"size": {
												"crossAxis": "12g"
											},
											"type": "BLOCK",
											"children": [{
												"id": "recipe-details-selling-unit-list",
												"layout": {
													"type": "FLOW",
													"axis": "VERTICAL",
													"spacing": {
														"mainAxis": 4,
														"crossAxis": 4
													}
												},
												"size": {
													"crossAxis": "12g"
												},
												"type": "BLOCK",
												"children": [{
													"type": "PML",
													"id": "selling-unit-s1020324-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 124)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 1,
																	"y": 1
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1020324"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1020324",
															"name": "McCain Chef Frites",
															"decorators": [],
															"display_price": 299,
															"image_id": "e2a5a637ad2d9a5fcac04ac2675c1f9883539803517b47620a0ae3d870b85126",
															"max_count": 99,
															"unit_quantity": "750g"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "e2a5a637ad2d9a5fcac04ac2675c1f9883539803517b47620a0ae3d870b85126"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020324',\n              \"ingredient_id\": '9ae133a6-0aa9-4afe-8d13-7dc27107f26b',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#F0E8DD",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "e2a5a637ad2d9a5fcac04ac2675c1f9883539803517b47620a0ae3d870b85126"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": []
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1020324&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#9F7234)Knuspriger Wellenschnitt#(#9F7234)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Chef Frites#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)McCain#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "2.99",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "750g",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€3.99/kg",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "#(#268484)Tiefkühl#(#268484)",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1020324",
																"color": "#9F7234",
																"secondaryColor": "#F0E8DD",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#9F7234",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1020324",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020324',\n              \"ingredient_id\": '9ae133a6-0aa9-4afe-8d13-7dc27107f26b',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020324',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1020324",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Chef Frites, von McCain, zu, 2 € 99 cents, 750g",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1020324&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020324',\n              \"ingredient_id\": '9ae133a6-0aa9-4afe-8d13-7dc27107f26b',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020324',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Chef Frites, von McCain",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020324',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020324\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1029657-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 110)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 2,
																	"y": 1
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1029657"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1029657",
															"name": "Irischer Cheddar",
															"decorators": [],
															"display_price": 299,
															"image_id": "c3f469e67f07bc53ef465ccf1e6033829abb3e9178cbc83558f40673b3f4bdbb",
															"max_count": 99,
															"unit_quantity": "mind. 142g"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "ddcb80fa4dfdd9de06f77cde0d3d2d397effee95f3b8682163d13c835678eab5"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1029657',\n              \"ingredient_id\": 'bfce232e-f464-4235-9fe2-448b5289265c',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#E3EEEE",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "ddcb80fa4dfdd9de06f77cde0d3d2d397effee95f3b8682163d13c835678eab5"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": []
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1029657&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#268484)Mild-säuerlich#(#268484)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Irischer Cheddar#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "2.99",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "mind. 142g",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€21.06/kg",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1029657",
																"color": "#268484",
																"secondaryColor": "#E3EEEE",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#268484",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1029657",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1029657',\n              \"ingredient_id\": 'bfce232e-f464-4235-9fe2-448b5289265c',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1029657',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1029657",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Irischer Cheddar, zu, 2 € 99 cents, mind. 142g",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1029657&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1029657',\n              \"ingredient_id\": 'bfce232e-f464-4235-9fe2-448b5289265c',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1029657',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Irischer Cheddar",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1029657',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1029657\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1022167-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 110)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 1,
																	"y": 2
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1022167"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1022167",
															"name": "Gut&Günstig Bacon",
															"decorators": [],
															"display_price": 139,
															"image_id": "ce1ce7ea92658443a3cf3ebe23eb3f4cb49b919313be8d2e9a6a5840ed6ec7cd",
															"max_count": 99,
															"unit_quantity": "100g"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "5d53106df6d5fbb80a2944ba2b154e5b0b80a9ac7c4578dba1806687bc58da13"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1022167',\n              \"ingredient_id\": '61a121e4-f184-4ba4-a2d4-313e45785dd9',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#EFDCDC",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "5d53106df6d5fbb80a2944ba2b154e5b0b80a9ac7c4578dba1806687bc58da13"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": []
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1022167&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#B40117)Mild geräuchert#(#B40117)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Bacon#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Gut&Günstig#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "1.39",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "100g",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€13.90/kg",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1022167",
																"color": "#B40117",
																"secondaryColor": "#EFDCDC",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#B40117",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1022167",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1022167',\n              \"ingredient_id\": '61a121e4-f184-4ba4-a2d4-313e45785dd9',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1022167',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1022167",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Bacon, von Gut&Günstig, zu, 1 € 39 cents, 100g",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1022167&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1022167',\n              \"ingredient_id\": '61a121e4-f184-4ba4-a2d4-313e45785dd9',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1022167',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Bacon, von Gut&Günstig",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1022167',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1022167\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1057181-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 111)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 2,
																	"y": 2
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1057181"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1057181",
															"name": "Best Burger Klassik Rinder-Burger",
															"decorators": [],
															"display_price": 499,
															"image_id": "a1d2f6358ccbc60c44f84928968bcf6bbec1e88c6c9f57c0776788120ab51b22",
															"max_count": 99,
															"unit_quantity": "2 x 180g"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "b3b05aaaec2e3aa23140c183c5a1d8a39529132c8d12bd96ba5ba7e15bcebe1a"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1057181',\n              \"ingredient_id\": '7e95f73e-2590-493b-bb50-7cbcd0260df0',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#EFDCDC",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "b3b05aaaec2e3aa23140c183c5a1d8a39529132c8d12bd96ba5ba7e15bcebe1a"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": [{
																							"absolutePosition": {
																								"left": 8,
																								"top": 8
																							},
																							"type": "CONTAINER",
																							"child": {
																								"axis": "HORIZONTAL",
																								"spacing": 10,
																								"type": "STACK",
																								"children": [{
																									"backgroundColor": "#B40117",
																									"borderRadius": 4,
																									"height": 22,
																									"padding": {
																										"left": 6,
																										"right": 6
																									},
																									"type": "CONTAINER",
																									"child": {
																										"spacing": 4,
																										"height": 22,
																										"axis": "HORIZONTAL",
																										"alignment": "CENTER",
																										"type": "STACK",
																										"children": [{
																											"numberOfLines": 1,
																											"textAttributes": {
																												"size": 12,
																												"weight": "MEDIUM",
																												"color": "#333333"
																											},
																											"markdown": "#(#ffffff)2 benötigt#(#ffffff)",
																											"type": "RICH_TEXT"
																										}]
																									}
																								}]
																							}
																						}]
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1057181&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Klassik Rinder-Burger#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Best Burger#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "4.99",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "2 x 180g",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€13.86/kg",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1057181",
																"color": "#B40117",
																"secondaryColor": "#EFDCDC",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#B40117",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1057181",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1057181',\n              \"ingredient_id\": '7e95f73e-2590-493b-bb50-7cbcd0260df0',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1057181',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1057181",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Klassik Rinder-Burger, von Best Burger, zu, 4 € 99 cents, 2 x 180g",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1057181&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1057181',\n              \"ingredient_id\": '7e95f73e-2590-493b-bb50-7cbcd0260df0',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1057181',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Klassik Rinder-Burger, von Best Burger",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1057181',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1057181\",\"sellingUnitPrice\":499,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1024110-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 144)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 1,
																	"y": 3
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1024110"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1024110",
															"name": "Edeka Craft Burger Buns vegan",
															"decorators": [],
															"display_price": 199,
															"image_id": "eb3bcdc6a9ae45b1c9ff6da3834db9552bca7b5da9fa8ae1914fe93033df113f",
															"max_count": 99,
															"unit_quantity": "4 Stück"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "9f0ac8ca673bfb5bf536fb7617d41736edcf77e2d70896c880f64aaf2dcddcdc"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1024110',\n              \"ingredient_id\": '4e8b7d93-9486-4d02-9a73-2690c018a7e0',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#F0E8DD",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "9f0ac8ca673bfb5bf536fb7617d41736edcf77e2d70896c880f64aaf2dcddcdc"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": [{
																							"absolutePosition": {
																								"top": 8,
																								"right": 8
																							},
																							"type": "CONTAINER",
																							"child": {
																								"axis": "HORIZONTAL",
																								"spacing": 10,
																								"type": "STACK",
																								"children": [{
																									"onPress": {
																										"actionType": "OPEN",
																										"target": "app.picnic://store/page;id=product-details-page-root,id=s1024110&show_category_action=true&show_remove_from_purchases_page_action=false"
																									},
																									"activeOpacity": 0.8,
																									"hitSlop": {
																										"horizontal": 22,
																										"vertical": 22
																									},
																									"type": "TOUCHABLE",
																									"child": {
																										"backgroundColor": "rgba(159, 114, 52, 0.15)",
																										"borderRadius": 4,
																										"height": 22,
																										"padding": {
																											"left": 6,
																											"right": 4
																										},
																										"type": "CONTAINER",
																										"child": {
																											"axis": "HORIZONTAL",
																											"height": "100%",
																											"spacing": 4,
																											"alignment": "CENTER",
																											"type": "STACK",
																											"children": [{
																												"iconKey": "percentage",
																												"fallback": {
																													"id": "picnic-page/bc8d8c0af03f076bd02cf8860ee7ef5643b3f5b9c5b9bfb5831e40a7cd3fa728"
																												},
																												"color": "rgba(159, 114, 52, 1)",
																												"width": 14,
																												"height": 14,
																												"type": "ICON"
																											}, {
																												"iconKey": "rightChevron",
																												"color": "rgba(159, 114, 52, 1)",
																												"width": 5,
																												"height": 9,
																												"type": "ICON"
																											}]
																										}
																									}
																								}]
																							}
																						}]
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1024110&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#9F7234)Aus Malzteig#(#9F7234)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Craft Burger Buns#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Edeka#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "1.99",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "4 Stück",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€6.63/kg",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "#(#84817d)4 Stück | Vorgeteilt#(#84817d)",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1024110",
																"color": "#9F7234",
																"secondaryColor": "#F0E8DD",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#9F7234",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1024110",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1024110',\n              \"ingredient_id\": '4e8b7d93-9486-4d02-9a73-2690c018a7e0',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1024110',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1024110",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Craft Burger Buns vegan, von Edeka, zu, 1 € 99 cents, 4 Stück",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen, zwei Mal tippen mit zwei Fingern, um zum Bündelbonus zu gelangen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1024110&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1024110',\n              \"ingredient_id\": '4e8b7d93-9486-4d02-9a73-2690c018a7e0',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1024110',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "magicTap",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1024110"
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Craft Burger Buns vegan, von Edeka",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1024110',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1024110\",\"sellingUnitPrice\":199,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1131727-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 111)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 2,
																	"y": 3
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1131727"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1131727",
															"name": "Heinz Tomato Ketchup",
															"decorators": [],
															"display_price": 229,
															"image_id": "fa93d366712177d5cef6f3d418c4d97eba1996b744bde496fb6bad32df51141d",
															"max_count": 99,
															"unit_quantity": "220ml"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "fa93d366712177d5cef6f3d418c4d97eba1996b744bde496fb6bad32df51141d"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1131727',\n              \"ingredient_id\": 'e222f63e-dffa-4d59-b9a2-33979f6cb8af',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#F0E8DD",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "fa93d366712177d5cef6f3d418c4d97eba1996b744bde496fb6bad32df51141d"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": []
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1131727&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Tomato Ketchup#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Heinz#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "2.29",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"overflow": "hidden",
																				"borderRadius": 4,
																				"borderWidth": 1,
																				"borderColor": "#5b534e",
																				"backgroundColor": "#ffffff",
																				"padding": {
																					"top": 1,
																					"bottom": 1,
																					"left": 3,
																					"right": 3
																				},
																				"type": "CONTAINER",
																				"child": {
																					"textAttributes": {
																						"size": 10,
																						"weight": "MEDIUM",
																						"color": "#333333"
																					},
																					"markdown": "#(#5b534e)Klein#(#5b534e)",
																					"type": "RICH_TEXT"
																				}
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "220ml",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€10.41/L",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1131727",
																"color": "#9F7234",
																"secondaryColor": "#F0E8DD",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#9F7234",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1131727",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1131727',\n              \"ingredient_id\": 'e222f63e-dffa-4d59-b9a2-33979f6cb8af',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1131727',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1131727",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Tomato Ketchup, von Heinz, zu, 2 € 29 cents, 220ml",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1131727&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1131727',\n              \"ingredient_id\": 'e222f63e-dffa-4d59-b9a2-33979f6cb8af',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1131727',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Tomato Ketchup, von Heinz",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1131727',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1131727\",\"sellingUnitPrice\":229,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1026198-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 110)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 1,
																	"y": 4
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1026198"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1026198",
															"name": "Thomy Mayonnaise",
															"decorators": [],
															"display_price": 219,
															"image_id": "9123ea013e88f0ab7fa793adcb52ee3605032789b2db511434717ea434f3c878",
															"max_count": 99,
															"unit_quantity": "250ml"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "9123ea013e88f0ab7fa793adcb52ee3605032789b2db511434717ea434f3c878"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1026198',\n              \"ingredient_id\": '8ab63da1-65bc-40d9-813c-08c674fc4c2f',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#F0E8DD",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "9123ea013e88f0ab7fa793adcb52ee3605032789b2db511434717ea434f3c878"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": [{
																							"absolutePosition": {
																								"top": 8,
																								"right": 8
																							},
																							"type": "CONTAINER",
																							"child": {
																								"axis": "HORIZONTAL",
																								"spacing": 10,
																								"type": "STACK",
																								"children": [{
																									"onPress": {
																										"actionType": "OPEN",
																										"target": "app.picnic://store/page;id=product-details-page-root,id=s1026198&show_category_action=true&show_remove_from_purchases_page_action=false"
																									},
																									"activeOpacity": 0.8,
																									"hitSlop": {
																										"horizontal": 22,
																										"vertical": 22
																									},
																									"type": "TOUCHABLE",
																									"child": {
																										"backgroundColor": "rgba(159, 114, 52, 0.15)",
																										"borderRadius": 4,
																										"height": 22,
																										"padding": {
																											"left": 6,
																											"right": 4
																										},
																										"type": "CONTAINER",
																										"child": {
																											"axis": "HORIZONTAL",
																											"height": "100%",
																											"spacing": 4,
																											"alignment": "CENTER",
																											"type": "STACK",
																											"children": [{
																												"iconKey": "percentage",
																												"fallback": {
																													"id": "picnic-page/bc8d8c0af03f076bd02cf8860ee7ef5643b3f5b9c5b9bfb5831e40a7cd3fa728"
																												},
																												"color": "rgba(159, 114, 52, 1)",
																												"width": 14,
																												"height": 14,
																												"type": "ICON"
																											}, {
																												"iconKey": "rightChevron",
																												"color": "rgba(159, 114, 52, 1)",
																												"width": 5,
																												"height": 9,
																												"type": "ICON"
																											}]
																										}
																									}
																								}]
																							}
																						}]
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1026198&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#9F7234)Eier aus Freilandhaltung#(#9F7234)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Mayonnaise#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Thomy#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "2.19",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "250ml",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€8.76/L",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1026198",
																"color": "#9F7234",
																"secondaryColor": "#F0E8DD",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#9F7234",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1026198",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1026198',\n              \"ingredient_id\": '8ab63da1-65bc-40d9-813c-08c674fc4c2f',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1026198',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1026198",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Mayonnaise, von Thomy, zu, 2 € 19 cents, 250ml",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen, zwei Mal tippen mit zwei Fingern, um zum Bündelbonus zu gelangen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1026198&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1026198',\n              \"ingredient_id\": '8ab63da1-65bc-40d9-813c-08c674fc4c2f',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1026198',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "magicTap",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1026198"
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Mayonnaise, von Thomy",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1026198',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1026198\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1028776-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 110)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 2,
																	"y": 4
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1028776"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1028776",
															"name": "Edeka Rucola",
															"decorators": [],
															"display_price": 139,
															"image_id": "cdaa86e85b9b056601f749711b36bf1de23a2553055bf858274e52153b41a214",
															"max_count": 99,
															"unit_quantity": "80g"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "59aa55771a07ffb40dc9a6ce9921a37728f2b46d65e0768c4e0d83a4f4dfb2e2"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1028776',\n              \"ingredient_id\": '038e43e0-4f9f-4f4e-9401-fc90f3600ba4',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#E7ECD7",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "59aa55771a07ffb40dc9a6ce9921a37728f2b46d65e0768c4e0d83a4f4dfb2e2"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": []
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1028776&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#7C9326)Gewaschen & verzehrfertig#(#7C9326)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Rucola#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Edeka#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "1.39",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "80g",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€17.38/kg",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1028776",
																"color": "#7C9326",
																"secondaryColor": "#E7ECD7",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#7C9326",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1028776",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1028776',\n              \"ingredient_id\": '038e43e0-4f9f-4f4e-9401-fc90f3600ba4',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1028776',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1028776",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Rucola, von Edeka, zu, 1 € 39 cents, 80g",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1028776&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1028776',\n              \"ingredient_id\": '038e43e0-4f9f-4f4e-9401-fc90f3600ba4',\n              \"ingredient_type\": 'CORE'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1028776',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Rucola, von Edeka",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1028776',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1028776\",\"sellingUnitPrice\":139,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}]
											}]
										}, {
											"id": "recipe-details-selling-unit-list-section-new__2",
											"layout": {
												"type": "FLOW",
												"axis": "VERTICAL",
												"padding": {
													"left": 8,
													"right": 8
												}
											},
											"size": {
												"crossAxis": "12g"
											},
											"type": "BLOCK",
											"children": [{
												"type": "PML",
												"id": "recipe-details-selling-unit-list-section-new-header-VARIATION",
												"size": {
													"crossAxis": "12g",
													"mainAxis": 50
												},
												"pml": {
													"pmlVersion": "0.1.0",
													"images": {},
													"component": {
														"axis": "HORIZONTAL",
														"alignment": "CENTER",
														"distribution": "SPACE_BETWEEN",
														"padding": {
															"top": 8,
															"bottom": 8,
															"right": 8,
															"left": 8
														},
														"height": "100%",
														"width": "100%",
														"type": "STACK",
														"children": [{
															"markdown": "Für weitere Kreationen",
															"textAlignment": "START",
															"textAttributes": {
																"size": 20,
																"weight": "SEMIBOLD",
																"color": "#333333"
															},
															"type": "RICH_TEXT"
														}]
													}
												}
											}, {
												"id": "recipe-details-selling-unit-list__2",
												"layout": {
													"type": "FLOW",
													"axis": "VERTICAL",
													"spacing": {
														"mainAxis": 4,
														"crossAxis": 4
													}
												},
												"size": {
													"crossAxis": "12g"
												},
												"type": "BLOCK",
												"children": [{
													"type": "PML",
													"id": "selling-unit-s1027672-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 110)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 1,
																	"y": 1
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1027672"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1027672",
															"name": "Kühne Gewürzgurken",
															"decorators": [],
															"display_price": 219,
															"image_id": "d488525b34cb9b80b9689e282278aaa8ad723827d0ab73a5f0dea6ec60464a0a",
															"max_count": 99,
															"unit_quantity": "185g"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "d488525b34cb9b80b9689e282278aaa8ad723827d0ab73a5f0dea6ec60464a0a"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1027672',\n              \"ingredient_id\": 'ce80b53a-cd93-409c-96f5-27ee3a8f38a3',\n              \"ingredient_type\": 'VARIATION'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#f0e8dd",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "d488525b34cb9b80b9689e282278aaa8ad723827d0ab73a5f0dea6ec60464a0a"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": [{
																							"absolutePosition": {
																								"top": 8,
																								"right": 8
																							},
																							"type": "CONTAINER",
																							"child": {
																								"axis": "HORIZONTAL",
																								"spacing": 10,
																								"type": "STACK",
																								"children": [{
																									"onPress": {
																										"actionType": "OPEN",
																										"target": "app.picnic://store/page;id=product-details-page-root,id=s1027672&show_category_action=true&show_remove_from_purchases_page_action=false"
																									},
																									"activeOpacity": 0.8,
																									"hitSlop": {
																										"horizontal": 22,
																										"vertical": 22
																									},
																									"type": "TOUCHABLE",
																									"child": {
																										"backgroundColor": "rgba(159, 114, 52, 0.15)",
																										"borderRadius": 4,
																										"height": 22,
																										"padding": {
																											"left": 6,
																											"right": 4
																										},
																										"type": "CONTAINER",
																										"child": {
																											"axis": "HORIZONTAL",
																											"height": "100%",
																											"spacing": 4,
																											"alignment": "CENTER",
																											"type": "STACK",
																											"children": [{
																												"iconKey": "percentage",
																												"fallback": {
																													"id": "picnic-page/bc8d8c0af03f076bd02cf8860ee7ef5643b3f5b9c5b9bfb5831e40a7cd3fa728"
																												},
																												"color": "rgba(159, 114, 52, 1)",
																												"width": 14,
																												"height": 14,
																												"type": "ICON"
																											}, {
																												"iconKey": "rightChevron",
																												"color": "rgba(159, 114, 52, 1)",
																												"width": 5,
																												"height": 9,
																												"type": "ICON"
																											}]
																										}
																									}
																								}]
																							}
																						}]
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1027672&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#9f7234)Mit Kräutern verfeinert#(#9f7234)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Gewürzgurken#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Kühne#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "2.19",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"overflow": "hidden",
																				"borderRadius": 4,
																				"borderWidth": 1,
																				"borderColor": "#5b534e",
																				"backgroundColor": "#ffffff",
																				"padding": {
																					"top": 1,
																					"bottom": 1,
																					"left": 3,
																					"right": 3
																				},
																				"type": "CONTAINER",
																				"child": {
																					"textAttributes": {
																						"size": 10,
																						"weight": "MEDIUM",
																						"color": "#333333"
																					},
																					"markdown": "#(#5b534e)Klein#(#5b534e)",
																					"type": "RICH_TEXT"
																				}
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "185g",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€6.64/kg",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1027672",
																"color": "#9f7234",
																"secondaryColor": "#f0e8dd",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#9f7234",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1027672",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1027672',\n              \"ingredient_id\": 'ce80b53a-cd93-409c-96f5-27ee3a8f38a3',\n              \"ingredient_type\": 'VARIATION'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1027672',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1027672",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Gewürzgurken, von Kühne, zu, 2 € 19 cents, 185g",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen, zwei Mal tippen mit zwei Fingern, um zum Bündelbonus zu gelangen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1027672&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1027672',\n              \"ingredient_id\": 'ce80b53a-cd93-409c-96f5-27ee3a8f38a3',\n              \"ingredient_type\": 'VARIATION'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1027672',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "magicTap",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1027672"
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Gewürzgurken, von Kühne",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1027672',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1027672\",\"sellingUnitPrice\":219,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1108789-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 110)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 2,
																	"y": 1
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1108789"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1108789",
															"name": "Bio Rispentomaten",
															"decorators": [],
															"display_price": 299,
															"image_id": "8c77caa806888bcd6cb9e24419c1f953d08c392b3cead985131807e5a60b6b00",
															"max_count": 99,
															"unit_quantity": "500g"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "8c77caa806888bcd6cb9e24419c1f953d08c392b3cead985131807e5a60b6b00"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1108789',\n              \"ingredient_id\": 'e1a50da4-6612-430c-a30c-31d63426859e',\n              \"ingredient_type\": 'VARIATION'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#E7ECD7",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "8c77caa806888bcd6cb9e24419c1f953d08c392b3cead985131807e5a60b6b00"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": [{
																							"absolutePosition": {
																								"left": 8,
																								"top": 8
																							},
																							"type": "CONTAINER",
																							"child": {
																								"axis": "HORIZONTAL",
																								"spacing": 10,
																								"type": "STACK",
																								"children": []
																							}
																						}]
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1108789&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)#(#628003)**Bio**#(#628003) Rispentomaten#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "2.99",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "500g",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€5.98/kg",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1108789",
																"color": "#7C9326",
																"secondaryColor": "#E7ECD7",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#7C9326",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1108789",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1108789',\n              \"ingredient_id\": 'e1a50da4-6612-430c-a30c-31d63426859e',\n              \"ingredient_type\": 'VARIATION'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1108789',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1108789",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Bio Rispentomaten, zu, 2 € 99 cents, 500g",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1108789&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1108789',\n              \"ingredient_id\": 'e1a50da4-6612-430c-a30c-31d63426859e',\n              \"ingredient_type\": 'VARIATION'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1108789',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Bio Rispentomaten",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1108789',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1108789\",\"sellingUnitPrice\":299,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}]
											}]
										}, {
											"id": "recipe-details-selling-unit-list-section-new__3",
											"layout": {
												"type": "FLOW",
												"axis": "VERTICAL",
												"padding": {
													"left": 8,
													"right": 8
												}
											},
											"size": {
												"crossAxis": "12g"
											},
											"type": "BLOCK",
											"children": [{
												"type": "PML",
												"id": "recipe-details-selling-unit-list-section-new-header-CUPBOARD",
												"size": {
													"crossAxis": "12g",
													"mainAxis": 50
												},
												"pml": {
													"pmlVersion": "0.1.0",
													"images": {},
													"component": {
														"axis": "HORIZONTAL",
														"alignment": "CENTER",
														"distribution": "SPACE_BETWEEN",
														"padding": {
															"top": 8,
															"bottom": 8,
															"right": 8,
															"left": 8
														},
														"height": "100%",
														"width": "100%",
														"type": "STACK",
														"children": [{
															"markdown": "Aus der eigenen Küche",
															"textAlignment": "START",
															"textAttributes": {
																"size": 20,
																"weight": "SEMIBOLD",
																"color": "#333333"
															},
															"type": "RICH_TEXT"
														}]
													}
												}
											}, {
												"id": "recipe-details-selling-unit-list__3",
												"layout": {
													"type": "FLOW",
													"axis": "VERTICAL",
													"spacing": {
														"mainAxis": 4,
														"crossAxis": 4
													}
												},
												"size": {
													"crossAxis": "12g"
												},
												"type": "BLOCK",
												"children": [{
													"type": "PML",
													"id": "selling-unit-s1020578-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 110)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 1,
																	"y": 1
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1020578"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1020578",
															"name": "Aquasale Meersalz Mühle",
															"decorators": [],
															"display_price": 249,
															"image_id": "d77897051fe60dce2eb94a21b9f1c1035fa3271d1cbe7fe79c407b5291dabb0c",
															"max_count": 99,
															"unit_quantity": "100g"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "d77897051fe60dce2eb94a21b9f1c1035fa3271d1cbe7fe79c407b5291dabb0c"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020578',\n              \"ingredient_id\": 'b6adaad8-d89a-40a9-bed4-96d1d9806f35',\n              \"ingredient_type\": 'CUPBOARD'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#F0E8DD",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "d77897051fe60dce2eb94a21b9f1c1035fa3271d1cbe7fe79c407b5291dabb0c"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": []
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1020578&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#9F7234)Mühle#(#9F7234)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Meersalz#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Aquasale#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "2.49",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "100g",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€24.90/kg",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1020578",
																"color": "#9F7234",
																"secondaryColor": "#F0E8DD",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#9F7234",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1020578",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020578',\n              \"ingredient_id\": 'b6adaad8-d89a-40a9-bed4-96d1d9806f35',\n              \"ingredient_type\": 'CUPBOARD'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020578',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1020578",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Meersalz Mühle, von Aquasale, zu, 2 € 49 cents, 100g",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1020578&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020578',\n              \"ingredient_id\": 'b6adaad8-d89a-40a9-bed4-96d1d9806f35',\n              \"ingredient_type\": 'CUPBOARD'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020578',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Meersalz Mühle, von Aquasale",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1020578',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1020578\",\"sellingUnitPrice\":249,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1052909-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 110)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 2,
																	"y": 1
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1052909"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1052909",
															"name": "Ostmann Pfefferkörner schwarz",
															"decorators": [],
															"display_price": 239,
															"image_id": "952dec49ba20f404db2f1f0d706f2dcd89fb76d1aad32d4157273c9dba1c7369",
															"max_count": 99,
															"unit_quantity": "50g"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "952dec49ba20f404db2f1f0d706f2dcd89fb76d1aad32d4157273c9dba1c7369"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1052909',\n              \"ingredient_id\": '93296dfe-e934-4795-b2bb-f292679dc0d9',\n              \"ingredient_type\": 'CUPBOARD'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#F0E8DD",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "952dec49ba20f404db2f1f0d706f2dcd89fb76d1aad32d4157273c9dba1c7369"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": [{
																							"absolutePosition": {
																								"top": 8,
																								"right": 8
																							},
																							"type": "CONTAINER",
																							"child": {
																								"axis": "HORIZONTAL",
																								"spacing": 10,
																								"type": "STACK",
																								"children": [{
																									"onPress": {
																										"actionType": "OPEN",
																										"target": "app.picnic://store/page;id=product-details-page-root,id=s1052909&show_category_action=true&show_remove_from_purchases_page_action=false"
																									},
																									"activeOpacity": 0.8,
																									"hitSlop": {
																										"horizontal": 22,
																										"vertical": 22
																									},
																									"type": "TOUCHABLE",
																									"child": {
																										"backgroundColor": "rgba(159, 114, 52, 0.15)",
																										"borderRadius": 4,
																										"height": 22,
																										"padding": {
																											"left": 6,
																											"right": 4
																										},
																										"type": "CONTAINER",
																										"child": {
																											"axis": "HORIZONTAL",
																											"height": "100%",
																											"spacing": 4,
																											"alignment": "CENTER",
																											"type": "STACK",
																											"children": [{
																												"iconKey": "percentage",
																												"fallback": {
																													"id": "picnic-page/bc8d8c0af03f076bd02cf8860ee7ef5643b3f5b9c5b9bfb5831e40a7cd3fa728"
																												},
																												"color": "rgba(159, 114, 52, 1)",
																												"width": 14,
																												"height": 14,
																												"type": "ICON"
																											}, {
																												"iconKey": "rightChevron",
																												"color": "rgba(159, 114, 52, 1)",
																												"width": 5,
																												"height": 9,
																												"type": "ICON"
																											}]
																										}
																									}
																								}]
																							}
																						}]
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1052909&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#9F7234)Schwarz#(#9F7234)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)Pfefferkörner#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Ostmann#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "2.39",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "50g",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€47.80/kg",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1052909",
																"color": "#9F7234",
																"secondaryColor": "#F0E8DD",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#9F7234",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1052909",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1052909',\n              \"ingredient_id\": '93296dfe-e934-4795-b2bb-f292679dc0d9',\n              \"ingredient_type\": 'CUPBOARD'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1052909',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1052909",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Pfefferkörner schwarz, von Ostmann, zu, 2 € 39 cents, 50g",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen, zwei Mal tippen mit zwei Fingern, um zum Bündelbonus zu gelangen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1052909&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1052909',\n              \"ingredient_id\": '93296dfe-e934-4795-b2bb-f292679dc0d9',\n              \"ingredient_type\": 'CUPBOARD'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1052909',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "magicTap",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1052909"
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Pfefferkörner schwarz, von Ostmann",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1052909',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1052909\",\"sellingUnitPrice\":239,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}, {
													"type": "PML",
													"id": "selling-unit-s1031414-tile",
													"size": {
														"crossAxis": "(SCREEN_WIDTH - 16 - 4 ) / 2",
														"mainAxis": "(((SCREEN_WIDTH - 16 - 4 ) / 2) + 127)"
													},
													"analytics": {
														"contexts": [{
															"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
															"data": {
																"type": "page_tile",
																"position": {
																	"x": 1,
																	"y": 2
																}
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/product/jsonschema/1-0-0",
															"data": {
																"product_id": "s1031414"
															}
														}, {
															"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
															"data": {
																"recipe_id": "66864e469a2ba07f8c321c8b",
																"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
															}
														}]
													},
													"content": {
														"type": "SELLING_UNIT_TILE",
														"sellingUnit": {
															"id": "s1031414",
															"name": "Bio Zentrale Bio Sonnenblumenöl",
															"decorators": [],
															"display_price": 409,
															"image_id": "d5243cd61d7e6ef7914c716f7f2de32c34ded94f5836fe18b892076cee1fa61e",
															"max_count": 10,
															"unit_quantity": "500ml"
														},
														"sellingUnitImageConfiguration": {
															"derivativeType": "padded",
															"extension": "webp",
															"id": "d5243cd61d7e6ef7914c716f7f2de32c34ded94f5836fe18b892076cee1fa61e"
														}
													},
													"viewComponentType": "REGULAR_SELLING_UNIT_TILE",
													"pml": {
														"pmlVersion": "0.1.0",
														"images": {},
														"component": {
															"axis": "VERTICAL",
															"distribution": "START",
															"alignment": "END",
															"backgroundColor": "#ffffff",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"accessible": true,
																"hideFromAccessibility": true,
																"width": "100%",
																"aspectRatio": 1,
																"type": "CONTAINER",
																"child": {
																	"onPress": {
																		"actionType": "CALLBACK",
																		"callback": {
																			"type": "EXPRESSION",
																			"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1031414',\n              \"ingredient_id\": 'f6b35e13-303c-49f8-85b4-9b3932e13ee2',\n              \"ingredient_type\": 'CUPBOARD'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																		}
																	},
																	"activeOpacity": 1,
																	"activeColor": "rgba(0, 0, 0, 0.1)",
																	"activeScale": 0.98,
																	"borderRadius": 12,
																	"backgroundColor": "#F0E8DD",
																	"type": "TOUCHABLE",
																	"child": {
																		"width": "100%",
																		"height": "100%",
																		"overflow": "hidden",
																		"type": "CONTAINER",
																		"child": {
																			"axis": "VERTICAL",
																			"height": "100%",
																			"type": "STACK",
																			"children": [{
																				"source": {
																					"id": "picnic-page/4242c4252bd2a18a899478427239b03fa5b73c50dcbabd98fe8227497835e891"
																				},
																				"extension": "webp",
																				"width": "100%",
																				"height": "100%",
																				"resizeMode": "COVER",
																				"placeholder": "NONE",
																				"type": "IMAGE"
																			}, {
																				"absolutePosition": {
																					"top": 0,
																					"bottom": 0,
																					"left": 0,
																					"right": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-image",
																					"type": "REFERENCE_CONTAINER",
																					"child": {
																						"source": {
																							"id": "d5243cd61d7e6ef7914c716f7f2de32c34ded94f5836fe18b892076cee1fa61e"
																						},
																						"derivativeType": "padded",
																						"extension": "webp",
																						"placeholder": {
																							"resizeMode": "CONTAIN",
																							"icon": "loadingCarrotTranslucentPadding"
																						},
																						"resizeMode": "CONTAIN",
																						"type": "IMAGE"
																					}
																				}
																			}, {
																				"hideFromAccessibility": true,
																				"height": "100%",
																				"width": "100%",
																				"absolutePosition": {
																					"left": 0,
																					"top": 0,
																					"right": 0,
																					"bottom": 0
																				},
																				"type": "CONTAINER",
																				"child": {
																					"id": "selling-unit-label-container",
																					"presets": {
																						"EXPANDED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"EXPANDED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_VISIBLE": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 1,
																								"duration": 150
																							}
																						},
																						"COLLAPSED_HIDDEN": {
																							"marginBottom": {
																								"type": "TIMING",
																								"toValue": 36,
																								"duration": 150
																							},
																							"opacity": {
																								"type": "TIMING",
																								"toValue": 0,
																								"duration": 150
																							}
																						}
																					},
																					"type": "ANIMATION_CONTAINER",
																					"child": {
																						"height": "100%",
																						"width": "100%",
																						"axis": "VERTICAL",
																						"type": "STACK",
																						"children": [{
																							"absolutePosition": {
																								"left": 8,
																								"top": 8
																							},
																							"type": "CONTAINER",
																							"child": {
																								"axis": "HORIZONTAL",
																								"spacing": 10,
																								"type": "STACK",
																								"children": []
																							}
																						}]
																					}
																				}
																			}]
																		}
																	}
																}
															}, {
																"overflow": "hidden",
																"accessible": true,
																"hideFromAccessibility": true,
																"borderRadius": 12,
																"width": "100%",
																"type": "CONTAINER",
																"child": {
																	"activeColor": "rgba(0, 0, 0, 0.05)",
																	"onPress": {
																		"actionType": "OPEN",
																		"target": "app.picnic://store/page;id=product-details-page-root,id=s1031414&show_category_action=true&show_remove_from_purchases_page_action=false"
																	},
																	"type": "TOUCHABLE",
																	"child": {
																		"axis": "VERTICAL",
																		"distribution": "START",
																		"alignment": "START",
																		"spacing": 2,
																		"padding": {
																			"top": 8,
																			"bottom": 8,
																			"left": 8,
																			"right": 8
																		},
																		"type": "STACK",
																		"children": [{
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"markdown": "#(#9F7234)Kaltgepresst#(#9F7234)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"numberOfLines": 2,
																			"type": "RICH_TEXT",
																			"children": [{
																				"markdown": "#(#333333)#(#628003)**Bio**#(#628003) Sonnenblumenöl#(#333333) ",
																				"textAttributes": {
																					"size": 16,
																					"weight": "MEDIUM",
																					"color": "#333333"
																				},
																				"type": "RICH_TEXT"
																			}, {
																				"textAttributes": {
																					"size": 12,
																					"weight": "REGULAR",
																					"color": "#333333",
																					"family": "PicnicSymbols"
																				},
																				"markdown": ">",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"width": "100%",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"textAttributes": {
																					"size": 14,
																					"weight": "REGULAR",
																					"color": "#333333"
																				},
																				"numberOfLines": 1,
																				"markdown": "#(#333333)Bio Zentrale#(#333333)",
																				"type": "RICH_TEXT"
																			}]
																		}, {
																			"type": "CONTAINER",
																			"child": {
																				"axis": "HORIZONTAL",
																				"distribution": "START",
																				"alignment": "CENTER",
																				"spacing": 4,
																				"type": "STACK",
																				"children": [{
																					"axis": "HORIZONTAL",
																					"alignment": "CENTER",
																					"type": "STACK",
																					"children": [{
																						"textAlignment": "END",
																						"textAttributes": {
																							"size": 14,
																							"weight": "BOLD",
																							"color": "#333333"
																						},
																						"markdown": "4.09",
																						"type": "RICH_TEXT"
																					}]
																				}]
																			}
																		}, {
																			"axis": "HORIZONTAL",
																			"distribution": "START",
																			"alignment": "CENTER",
																			"spacing": 4,
																			"type": "STACK",
																			"children": [{
																				"numberOfLines": 1,
																				"flexShrink": 0,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "500ml",
																				"type": "RICH_TEXT"
																			}, {
																				"height": 3,
																				"aspectRatio": 1,
																				"iconKey": "dotDivider",
																				"color": "#5b534e",
																				"type": "ICON"
																			}, {
																				"numberOfLines": 1,
																				"flexShrink": 1,
																				"textAttributes": {
																					"size": 12,
																					"weight": "MEDIUM",
																					"color": "#5b534e"
																				},
																				"markdown": "€8.18/L",
																				"type": "RICH_TEXT"
																			}]
																		}]
																	}
																}
															}, {
																"presentationStyle": "SELLING_UNIT_REGULAR_TILE",
																"sellingUnitId": "s1031414",
																"color": "#9F7234",
																"secondaryColor": "#F0E8DD",
																"type": "UNAVAILABILITY_CONTAINER"
															}, {
																"absolutePosition": {
																	"left": 0,
																	"top": 0,
																	"right": 0,
																	"bottom": 0
																},
																"pointerEvents": "box-none",
																"type": "CONTAINER",
																"child": {
																	"width": "100%",
																	"pointerEvents": "box-none",
																	"aspectRatio": 1,
																	"type": "CONTAINER",
																	"child": {
																		"absolutePosition": {
																			"bottom": 8,
																			"right": 8,
																			"left": 8
																		},
																		"type": "CONTAINER",
																		"child": {
																			"textType": null,
																			"borderRadius": null,
																			"color": "#9F7234",
																			"showCollapsed": false,
																			"showCollapsedRemoveButton": true,
																			"sellingUnitId": "s1031414",
																			"onIncrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1031414',\n              \"ingredient_id\": 'f6b35e13-303c-49f8-85b4-9b3932e13ee2',\n              \"ingredient_type\": 'CUPBOARD'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"onDecrementPress": {
																				"actionType": "CALLBACK",
																				"callback": {
																					"type": "EXPRESSION",
																					"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1031414',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																				}
																			},
																			"type": "STEPPER"
																		}
																	}
																}
															}, {
																"contentType": "SELLING_UNIT",
																"sellingUnitId": "s1031414",
																"availableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Bio Sonnenblumenöl, von Bio Zentrale, zu, 4 € 9 cents, 500ml",
																	"accessibilityHint": "zwei Mal tippen für mehr Informationen",
																	"accessibilityActions": [{
																		"name": "activate",
																		"onAction": {
																			"actionType": "OPEN",
																			"target": "app.picnic://store/page;id=product-details-page-root,id=s1031414&show_category_action=true&show_remove_from_purchases_page_action=false"
																		}
																	}, {
																		"name": "increment",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/assign-selling-unit-to-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1031414',\n              \"ingredient_id\": 'f6b35e13-303c-49f8-85b4-9b3932e13ee2',\n              \"ingredient_type\": 'CUPBOARD'\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n            RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n            RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n            const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  segmentType,\n  segmentName\n) => {\n  const contexts = [\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n      data: {\n        recipe_id: recipeId,\n        day_relative_to_slot: Number(dayRelativeToSlot),\n        portions: portions\n      }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(segmentType && segmentName) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/segment/jsonschema/1-0-0',\n      data: {\n        segment_type: segmentType,\n        segment_name: segmentName\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n\n  return contexts;\n}\n            const analyticsContexts = getMealsUnavailabilityAnalytics(\n              '66864e469a2ba07f8c321c8b',\n              undefined,\n              undefined,\n              resp.dayRelativeToSlot,\n              resp.numberOfServings,\n              'RDP'\n            );\n            onPMLAction(\n              {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n              analyticsContexts\n            );\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {\n            RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n          }\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1031414',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"unavailableAccessibility": {
																	"accessible": true,
																	"accessibilityRole": "adjustable",
																	"accessibilityLabel": "Bio Sonnenblumenöl, von Bio Zentrale",
																	"accessibilityHint": "tippe zwei Mal, um eine Alternative anzuzeigen",
																	"accessibilityActions": [{
																		"name": "activate"
																	}, {
																		"name": "decrement",
																		"onAction": {
																			"actionType": "CALLBACK",
																			"callback": {
																				"type": "EXPRESSION",
																				"expression": "() => {\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        onPMLAction({\n    actionType: \"CALLBACK\",\n    callback: () => {\n      const operationId = Math.floor(Math.random() * 100000);\n      onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"REMOVE\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n      onPMLAction({\n        actionType: \"ENDPOINT\",\n        method: \"post\",\n        url: 'pages/task/remove-selling-unit-from-day',\n        body: {\n            \"payload\": {\n              \"recipe_id\": '66864e469a2ba07f8c321c8b',\n              \"selling_unit_id\": 's1031414',\n              \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n            }\n          },\n        onSuccess: {\n            actionType: \"CALLBACK\",\n            callback: (resp) => {\n              \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: operationId,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n              return resp\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (resp) => {\n              if (resp.isLastSellingUnitRemoved) {\n                RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n              }\n          }\n            }\n        },\n        onError: {\n            actionType: \"CALLBACK\",\n            callback: (err) => {\n              onPMLAction({\n    actionType: \"MODIFY_CART\",\n    operations: [{\"type\":\"ADD\",\"sellingUnitId\":\"s1031414\",\"sellingUnitPrice\":409,\"quantity\":1}],\n    operationId: operationId\n  });\n              return err;\n            },\n            onNext: {\n              actionType: \"CALLBACK\",\n              callback: (errorResponse) => {}\n            }\n        }\n      });\n    }\n  }\n    );\n      }"
																			}
																		}
																	}]
																},
																"type": "ACCESSIBILITY_CONTAINER"
															}]
														}
													}
												}]
											}]
										}]
									}]
								}, {
									"id": "recipe-content-tabs-list-instructions",
									"size": {
										"crossAxis": "12g"
									},
									"layout": {
										"type": "FLOW",
										"axis": "VERTICAL"
									},
									"analytics": {
										"contexts": [{
											"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
											"data": {
												"recipe_id": "66864e469a2ba07f8c321c8b",
												"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
											}
										}]
									},
									"isHidden": {
										"type": "EXPRESSION",
										"expression": "RecipeDetailsPageState.focusedTabIdState !== 'instructions'"
									},
									"type": "BLOCK",
									"children": [{
										"type": "PML",
										"id": "recipe-details-instructions-section",
										"size": {
											"crossAxis": "12g"
										},
										"analytics": {
											"contexts": [{
												"schema": "iglu:tech.picnic.snowplow.analytics/page_component/jsonschema/1-1-0",
												"data": {
													"type": "pml"
												}
											}, {
												"schema": "iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0",
												"data": {
													"template_id": "recipe-details-instructions-section"
												}
											}, {
												"schema": "iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0",
												"data": {
													"recipe_id": "66864e469a2ba07f8c321c8b",
													"products": ["s1020324", "s1029657", "s1022167", "s1057181", "s1024110", "s1131727", "s1026198", "s1028776", "s1027672", "s1108789", "s1020578", "s1052909", "s1031414"]
												}
											}]
										},
										"pml": {
											"pmlVersion": "0.1.0",
											"images": {},
											"component": {
												"axis": "VERTICAL",
												"alignment": "FILL",
												"backgroundColor": "#fcfaf9",
												"padding": {
													"top": 24,
													"bottom": 0,
													"right": 16,
													"left": 16
												},
												"spacing": 12,
												"type": "STACK",
												"children": [{
													"textAlignment": "START",
													"textAttributes": {
														"size": 20,
														"weight": "SEMIBOLD",
														"color": "#333333"
													},
													"markdown": "So wird's gemacht (4 Portionen)",
													"type": "RICH_TEXT"
												}, {
													"axis": "VERTICAL",
													"alignment": "FILL",
													"spacing": 24,
													"type": "STACK",
													"children": [{
														"axis": "HORIZONTAL",
														"spacing": 16,
														"type": "STACK",
														"children": [{
															"width": 28,
															"type": "CONTAINER",
															"child": {
																"textAttributes": {
																	"size": 28,
																	"weight": "SEMIBOLD",
																	"color": "#295813"
																},
																"textAlignment": "CENTER",
																"markdown": "1",
																"numberOfLines": 1,
																"type": "RICH_TEXT"
															}
														}, {
															"textAttributes": {
																"size": 16,
																"weight": "REGULAR",
																"color": "#333333"
															},
															"textAlignment": "START",
															"markdown": "Ofen vorheizen und **1 Packung Pommes** nach Packungsanweisung zubereiten. Mit **Salz** würzen.",
															"type": "RICH_TEXT"
														}]
													}, {
														"axis": "HORIZONTAL",
														"spacing": 16,
														"type": "STACK",
														"children": [{
															"width": 28,
															"type": "CONTAINER",
															"child": {
																"textAttributes": {
																	"size": 28,
																	"weight": "SEMIBOLD",
																	"color": "#295813"
																},
																"textAlignment": "CENTER",
																"markdown": "2",
																"numberOfLines": 1,
																"type": "RICH_TEXT"
															}
														}, {
															"textAttributes": {
																"size": 16,
																"weight": "REGULAR",
																"color": "#333333"
															},
															"textAlignment": "START",
															"markdown": "In der Zwischenzeit eine Pfanne auf hoher Stufe erhitzen und **4 Scheiben Bacon** darin 3 Min. von beiden Seiten knusprig braten. Auf einem Küchenkrepp abtropfen lassen.",
															"type": "RICH_TEXT"
														}]
													}, {
														"axis": "HORIZONTAL",
														"spacing": 16,
														"type": "STACK",
														"children": [{
															"width": 28,
															"type": "CONTAINER",
															"child": {
																"textAttributes": {
																	"size": 28,
																	"weight": "SEMIBOLD",
																	"color": "#295813"
																},
																"textAlignment": "CENTER",
																"markdown": "3",
																"numberOfLines": 1,
																"type": "RICH_TEXT"
															}
														}, {
															"textAttributes": {
																"size": 16,
																"weight": "REGULAR",
																"color": "#333333"
															},
															"textAlignment": "START",
															"markdown": "In derselben Pfanne **2 EL Öl** auf hoher Stufe erhitzen und **4 Burger Patties** von jeder Seite 2 Min. anbraten. Mit **Salz** und **Pfeffer** würzen und die Patties jeweils mit **1 Scheibe Käse** belegen. Herd ausstellen, Pfanne mit einem Deckel abdecken und die Patties mit der Resthitze etwa 5 Min. weiterbraten, bis der Käse leicht geschmolzen ist.",
															"type": "RICH_TEXT"
														}]
													}, {
														"axis": "HORIZONTAL",
														"spacing": 16,
														"type": "STACK",
														"children": [{
															"width": 28,
															"type": "CONTAINER",
															"child": {
																"textAttributes": {
																	"size": 28,
																	"weight": "SEMIBOLD",
																	"color": "#295813"
																},
																"textAlignment": "CENTER",
																"markdown": "4",
																"numberOfLines": 1,
																"type": "RICH_TEXT"
															}
														}, {
															"textAttributes": {
																"size": 16,
																"weight": "REGULAR",
																"color": "#333333"
															},
															"textAlignment": "START",
															"markdown": "**4 Burgerbrötchen** aufschneiden und ggf. kurz in der Pfanne rösten. Die unteren Hälften mit jeweils **1 TL Ketchup**, die oberen mit jeweils **1 TL Mayonnaise** bestreichen.",
															"type": "RICH_TEXT"
														}]
													}, {
														"axis": "HORIZONTAL",
														"spacing": 16,
														"type": "STACK",
														"children": [{
															"width": 28,
															"type": "CONTAINER",
															"child": {
																"textAttributes": {
																	"size": 28,
																	"weight": "SEMIBOLD",
																	"color": "#295813"
																},
																"textAlignment": "CENTER",
																"markdown": "5",
																"numberOfLines": 1,
																"type": "RICH_TEXT"
															}
														}, {
															"textAttributes": {
																"size": 16,
																"weight": "REGULAR",
																"color": "#333333"
															},
															"textAlignment": "START",
															"markdown": "Bacon Cheeseburger schichten. Hierfür auf den unteren Teil des Brötchens die Burger Patties legen, mit etwas **Rucola** belegen und den oberen Teil des Brötchens draufsetzen.",
															"type": "RICH_TEXT"
														}]
													}, {
														"axis": "HORIZONTAL",
														"spacing": 16,
														"type": "STACK",
														"children": [{
															"width": 28,
															"type": "CONTAINER",
															"child": {
																"textAttributes": {
																	"size": 28,
																	"weight": "SEMIBOLD",
																	"color": "#295813"
																},
																"textAlignment": "CENTER",
																"markdown": "6",
																"numberOfLines": 1,
																"type": "RICH_TEXT"
															}
														}, {
															"textAttributes": {
																"size": 16,
																"weight": "REGULAR",
																"color": "#333333"
															},
															"textAlignment": "START",
															"markdown": "Bacon Cheeseburger mit Pommes servieren.",
															"type": "RICH_TEXT"
														}]
													}, {
														"axis": "HORIZONTAL",
														"spacing": 16,
														"type": "STACK",
														"children": [{
															"width": 28,
															"type": "CONTAINER",
															"child": {
																"textAttributes": {
																	"size": 16,
																	"weight": "SEMIBOLD",
																	"color": "#295813"
																},
																"textAlignment": "CENTER",
																"markdown": "Tipp",
																"numberOfLines": 1,
																"type": "RICH_TEXT"
															}
														}, {
															"textAttributes": {
																"size": 16,
																"weight": "REGULAR",
																"color": "#333333"
															},
															"textAlignment": "START",
															"markdown": "Du kannst deinen Burger nach deinem Geschmack belegen. Zum Beispiel zusätzlich mit Gewürzgurken und einer Scheibe Tomate.",
															"type": "RICH_TEXT"
														}]
													}]
												}, {
													"extension": "webp",
													"source": {
														"id": "picnic-page/059cb2b26f144fdd51fbf5dc06b22f8ab76eef90b19c44420af9e1fab5c22a5b"
													},
													"width": "100%",
													"resizeMode": "CONTAIN",
													"aspectRatio": 2.128,
													"type": "IMAGE"
												}]
											}
										}
									}]
								}]
							}
						},
						"type": "SUSPENSE",
						"pageConfig": {
							"id": "recipe-portioning-content",
							"parameters": {
								"recipe_id": "66864e469a2ba07f8c321c8b"
							}
						},
						"loadingConfig": null,
						"errorConfig": null
					}]
				}, {
					"id": "recipe-details-stepper-wrapper",
					"suspenseId": "recipe-details-stepper-suspense-id-66864e469a2ba07f8c321c8b",
					"child": {
						"id": "RecipeDetailsStepperState",
						"state": {
							"dayOffsetState": null,
							"recipeBasketState": "AVAILABLE",
							"unavailableIngredientInBasketState": false
						},
						"type": "STATE_BOUNDARY",
						"child": {
							"type": "PML",
							"id": "rdp-stepper",
							"size": {
								"crossAxis": "12g",
								"mainAxis": 1
							},
							"onPageFocus": {
								"actionType": "RELOAD",
								"suspenseId": "recipe-details-stepper-suspense-id-66864e469a2ba07f8c321c8b"
							},
							"pml": {
								"pmlVersion": "0.1.0",
								"images": {},
								"component": {
									"axis": "VERTICAL",
									"type": "STACK",
									"children": [{
										"height": 10,
										"width": "100%",
										"type": "CONTAINER",
										"child": null
									}, {
										"height": 1,
										"width": "100%",
										"backgroundColor": "#f8f5f2",
										"absolutePosition": {
											"bottom": 54
										},
										"type": "CONTAINER",
										"child": null
									}, {
										"height": 54,
										"width": "100%",
										"absolutePosition": {
											"bottom": 0
										},
										"backgroundColor": "#ffffff",
										"padding": {
											"top": 8,
											"bottom": 8,
											"left": 12,
											"right": 12
										},
										"type": "CONTAINER",
										"child": {
											"spacing": 8,
											"alignContent": "CENTER",
											"alignment": "CENTER",
											"axis": "HORIZONTAL",
											"accessible": true,
											"accessibilityRole": "adjustable",
											"accessibilityLabel": {
												"type": "EXPRESSION",
												"expression": "(() => {\n  if (RecipeDetailsStepperState.recipeBasketState === 'ADDED') { \n    if (RecipeDetailsPageState.servingsState <= 1) {\n      return `${RecipeDetailsPageState.servingsState} portionen, zum Anpassen nach oben oder unten streichen, zum Ändern des Tages zweimal tippen`;\n    } else {\n      return `${RecipeDetailsPageState.servingsState} portionen, zum Anpassen nach oben oder unten streichen, zum Hinzufügen eines Rezepts zweimal tippen`;\n    }\n  } else if (RecipeDetailsStepperState.recipeBasketState === 'AVAILABLE') {\n    return `${RecipeDetailsPageState.servingsState} portionen, zum Anpassen nach oben oder unten streichen, zum Hinzufügen eines Rezepts zweimal tippen`;\n  } else {\n    return 'rezept zurzeit nicht lieferbar';\n  }\n})();"
											},
											"accessibilityActions": [{
												"name": "activate",
												"onAction": {
													"actionType": "CALLBACK",
													"callback": {
														"type": "EXPRESSION",
														"expression": "() => {\n          const isRecipeAlreadyInBasket = RecipeDetailsStepperState.recipeBasketState === 'ADDED';\n          \n          if (isRecipeAlreadyInBasket) { \n            onPMLAction({\n              \"actionType\": 'OPEN',\n              \"target\": `app.picnic://store/page;id=meals-planner-day-bottom-sheet,presentation-mode=MODAL_OVER_CONTEXT,type=STATIC&recipeId=66864e469a2ba07f8c321c8b&start_date=2025-01-11T01%3A00%3A00.000&origin=rdp&portions=${RecipeDetailsPageState.servingsState}&day_offset=${RecipeDetailsStepperState.dayOffsetState}`\n            }) \n          } else {\n            RecipeDetailsPageState.basketModificationOngoingState = true;\n              onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n            onPMLAction({\n              \"actionType\": \"ENDPOINT\",\n              \"method\": \"post\",\n              \"url\": 'pages/task/assign-recipe-to-day',\n              \"body\": {\n                \"payload\": {\n                  \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                  \"portions\": RecipeDetailsPageState.servingsState,\n                  \"day_offset\": RecipeDetailsStepperState.dayOffsetState,\n                  \"core_ingredients\": RecipePortioningContentState.coreIngredientsState\n                }\n              },\n              \"onSuccess\": {\n                \"actionType\": \"CALLBACK\",\n                \"callback\": (resp) => {\n                  \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                  RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n                  RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n                  RecipeDetailsPageState.basketModificationOngoingState = false;\n                  RecipeDetailsStepperState.unavailableIngredientInBasketState = resp.anyUnavailableIngredient;\n                  const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                  const analyticsContexts = getMealsUnavailabilityAnalytics(\n                    '66864e469a2ba07f8c321c8b',\n                    resp.anyUnavailableIngredient,\n                    resp.unAvailableIngredients,\n                    RecipeDetailsStepperState.dayOffsetState,\n                    RecipeDetailsPageState.servingsState,\n                    'RDP'\n                  )\n                  onPMLAction(\n                    {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                    analyticsContexts\n                  );\n                }\n              },\n              \"onError\": {\n                \"actionType\": \"CALLBACK\",\n                \"callback\": () => {\n                  RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n                  RecipeDetailsPageState.basketModificationOngoingState = false;\n                  onPMLAction({\n                    \"actionType\": \"EVENT\",\n                    \"action\": {\n                      \"type\": \"TOAST\",\n                      \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                    }\n                  })\n                }\n              }\n            })\n          }\n        }"
													}
												}
											}, {
												"name": "increment",
												"onAction": {
													"actionType": "CALLBACK",
													"callback": {
														"type": "EXPRESSION",
														"expression": "() => {\n        if (GlobalState.debounceTimer) {\n          clearTimeout(GlobalState.debounceTimer);\n        }\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        \n        const isRecipeAlreadyInBasket = RecipeDetailsStepperState.recipeBasketState === 'ADDED';\n        const shouldRemoveRecipeFromBasket = ((false && RecipeDetailsPageState.servingsState - 1 < 1));\n        const oldServingSize = RecipeDetailsPageState.servingsState;\n        const newServingSize = true\n          ? RecipeDetailsPageState.servingsState >= 24 \n            ? 24 \n            : RecipeDetailsPageState.servingsState + 1\n          : RecipeDetailsPageState.servingsState <= 1 \n            ? 1 \n            : RecipeDetailsPageState.servingsState - 1;\n            \n        if (newServingSize !== oldServingSize) {\n          RecipeDetailsPageState.servingsState = newServingSize;\n        }\n            \n        GlobalState.debounceTimer = setTimeout(() => {\n          GlobalState.debounceTimer = 0;\n          RecipePortioningContentState.reloadOngoingState = true;\n          onPMLAction({\n            \"actionType\": \"RELOAD\",\n            \"suspenseId\": \"recipe-portioning-content-suspense-id-66864e469a2ba07f8c321c8b\",\n            \"pageConfig\": {\n              \"id\": \"recipe-portioning-content\",\n              \"parameters\": { \"recipe_id\": '66864e469a2ba07f8c321c8b', \"servings\": newServingSize }\n            },\n            \"onError\": {\n              \"actionType\": \"CALLBACK\",\n              \"callback\": () => {\n                RecipeDetailsPageState.servingsState = oldServingSize;\n                RecipePortioningContentState.reloadOngoingState = false;\n                onPMLAction({\n                  \"actionType\": \"EVENT\",\n                  \"action\": {\n                    \"type\": \"TOAST\",\n                    \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                  }\n                });\n              }\n            }\n          });\n  \n          if (isRecipeAlreadyInBasket) {\n            RecipeDetailsPageState.basketModificationOngoingState = true;\n            if (shouldRemoveRecipeFromBasket) { \n              onPMLAction({\n                \"actionType\": \"ENDPOINT\",\n                \"method\": \"post\",\n                \"url\": 'pages/task/remove-recipe-from-day',\n                \"body\": {\n                  \"payload\": {\n                    \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                    \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n                  }\n                },\n                \"onSuccess\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": (resp) => {\n                    \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                    RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    RecipeDetailsStepperState.unavailableIngredientInBasketState = false;\n                    const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                    const analyticsContexts = getMealsUnavailabilityAnalytics(\n                      '66864e469a2ba07f8c321c8b',\n                      undefined,\n                      undefined,\n                      RecipeDetailsStepperState.dayOffsetState,\n                      0,\n                      'RDP',\n                      'ADD'\n                    )\n                    onPMLAction(\n                      {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                      analyticsContexts\n                    );\n                  }\n                },\n                \"onError\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": () => {\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    onPMLAction({\n                      \"actionType\": \"EVENT\",\n                      \"action\": {\n                        \"type\": \"TOAST\",\n                        \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                      }\n                    });\n                  }\n                }\n              })\n            } else {\n              onPMLAction({\n                \"actionType\": \"ENDPOINT\",\n                \"method\": \"post\",\n                \"url\": 'pages/task/update-number-of-portions-task',\n                \"body\": {\n                  \"payload\": {\n                    \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                    \"day_offset\": RecipeDetailsStepperState.dayOffsetState,\n                    \"portions\": newServingSize\n                  }\n                },\n                \"onSuccess\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": (resp) => {\n                    \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    RecipeDetailsStepperState.unavailableIngredientInBasketState  = resp.anyUnavailableIngredient;\n                    const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                    const analyticsContexts = getMealsUnavailabilityAnalytics(\n                      '66864e469a2ba07f8c321c8b',\n                      resp.anyUnavailableIngredient,\n                      resp.unAvailableIngredients,\n                      RecipeDetailsStepperState.dayOffsetState,\n                      newServingSize,\n                      'RDP',\n                      'ADD'\n                    )\n                    onPMLAction(\n                      {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                      analyticsContexts\n                    );\n                  }\n                },\n                \"onError\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": () => {\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    onPMLAction({\n                      \"actionType\": \"EVENT\",\n                      \"action\": {\n                        \"type\": \"TOAST\",\n                        \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                      }\n                    });\n                  }\n                }\n              });\n            }\n          }\n        }, 500);\n      }"
													}
												}
											}, {
												"name": "decrement",
												"onAction": {
													"actionType": "CALLBACK",
													"callback": {
														"type": "EXPRESSION",
														"expression": "() => {\n        if (GlobalState.debounceTimer) {\n          clearTimeout(GlobalState.debounceTimer);\n        }\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        \n        const isRecipeAlreadyInBasket = RecipeDetailsStepperState.recipeBasketState === 'ADDED';\n        const shouldRemoveRecipeFromBasket = ((true && RecipeDetailsPageState.servingsState - 1 < 1));\n        const oldServingSize = RecipeDetailsPageState.servingsState;\n        const newServingSize = false\n          ? RecipeDetailsPageState.servingsState >= 24 \n            ? 24 \n            : RecipeDetailsPageState.servingsState + 1\n          : RecipeDetailsPageState.servingsState <= 1 \n            ? 1 \n            : RecipeDetailsPageState.servingsState - 1;\n            \n        if (newServingSize !== oldServingSize) {\n          RecipeDetailsPageState.servingsState = newServingSize;\n        }\n            \n        GlobalState.debounceTimer = setTimeout(() => {\n          GlobalState.debounceTimer = 0;\n          RecipePortioningContentState.reloadOngoingState = true;\n          onPMLAction({\n            \"actionType\": \"RELOAD\",\n            \"suspenseId\": \"recipe-portioning-content-suspense-id-66864e469a2ba07f8c321c8b\",\n            \"pageConfig\": {\n              \"id\": \"recipe-portioning-content\",\n              \"parameters\": { \"recipe_id\": '66864e469a2ba07f8c321c8b', \"servings\": newServingSize }\n            },\n            \"onError\": {\n              \"actionType\": \"CALLBACK\",\n              \"callback\": () => {\n                RecipeDetailsPageState.servingsState = oldServingSize;\n                RecipePortioningContentState.reloadOngoingState = false;\n                onPMLAction({\n                  \"actionType\": \"EVENT\",\n                  \"action\": {\n                    \"type\": \"TOAST\",\n                    \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                  }\n                });\n              }\n            }\n          });\n  \n          if (isRecipeAlreadyInBasket) {\n            RecipeDetailsPageState.basketModificationOngoingState = true;\n            if (shouldRemoveRecipeFromBasket) { \n              onPMLAction({\n                \"actionType\": \"ENDPOINT\",\n                \"method\": \"post\",\n                \"url\": 'pages/task/remove-recipe-from-day',\n                \"body\": {\n                  \"payload\": {\n                    \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                    \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n                  }\n                },\n                \"onSuccess\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": (resp) => {\n                    \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                    RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    RecipeDetailsStepperState.unavailableIngredientInBasketState = false;\n                    const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                    const analyticsContexts = getMealsUnavailabilityAnalytics(\n                      '66864e469a2ba07f8c321c8b',\n                      undefined,\n                      undefined,\n                      RecipeDetailsStepperState.dayOffsetState,\n                      0,\n                      'RDP',\n                      'REMOVE'\n                    )\n                    onPMLAction(\n                      {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                      analyticsContexts\n                    );\n                  }\n                },\n                \"onError\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": () => {\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    onPMLAction({\n                      \"actionType\": \"EVENT\",\n                      \"action\": {\n                        \"type\": \"TOAST\",\n                        \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                      }\n                    });\n                  }\n                }\n              })\n            } else {\n              onPMLAction({\n                \"actionType\": \"ENDPOINT\",\n                \"method\": \"post\",\n                \"url\": 'pages/task/update-number-of-portions-task',\n                \"body\": {\n                  \"payload\": {\n                    \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                    \"day_offset\": RecipeDetailsStepperState.dayOffsetState,\n                    \"portions\": newServingSize\n                  }\n                },\n                \"onSuccess\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": (resp) => {\n                    \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    RecipeDetailsStepperState.unavailableIngredientInBasketState  = resp.anyUnavailableIngredient;\n                    const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                    const analyticsContexts = getMealsUnavailabilityAnalytics(\n                      '66864e469a2ba07f8c321c8b',\n                      resp.anyUnavailableIngredient,\n                      resp.unAvailableIngredients,\n                      RecipeDetailsStepperState.dayOffsetState,\n                      newServingSize,\n                      'RDP',\n                      'REMOVE'\n                    )\n                    onPMLAction(\n                      {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                      analyticsContexts\n                    );\n                  }\n                },\n                \"onError\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": () => {\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    onPMLAction({\n                      \"actionType\": \"EVENT\",\n                      \"action\": {\n                        \"type\": \"TOAST\",\n                        \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                      }\n                    });\n                  }\n                }\n              });\n            }\n          }\n        }, 500);\n      }"
													}
												}
											}],
											"type": "STACK",
											"children": [{
												"width": {
													"type": "EXPRESSION",
													"expression": "(CONTAINER_WIDTH / 2) - 8"
												},
												"axis": "HORIZONTAL",
												"alignment": "CENTER",
												"accessible": false,
												"hideFromAccessibility": true,
												"type": "STACK",
												"children": [{
													"axis": "HORIZONTAL",
													"distribution": "CENTER",
													"width": "25%",
													"type": "STACK",
													"children": [{
														"width": 24,
														"height": null,
														"opacity": {
															"type": "EXPRESSION",
															"expression": "((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipePortioningContentState.reloadOngoingState || RecipeDetailsPageState.basketModificationOngoingState)) ? 0.5 : 1"
														},
														"accessible": false,
														"hideFromAccessibility": true,
														"type": "CONTAINER",
														"child": {
															"axis": "VERTICAL",
															"alignment": "CENTER",
															"distribution": "CENTER",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"iconKey": "minus",
																"width": 16,
																"height": 16,
																"color": "#333333",
																"type": "ICON"
															}]
														}
													}]
												}, {
													"width": "50%",
													"type": "CONTAINER",
													"child": {
														"numberOfLines": 1,
														"textAlignment": "CENTER",
														"type": "RICH_TEXT",
														"children": [{
															"markdown": {
																"type": "EXPRESSION",
																"expression": "RecipeDetailsPageState.servingsState.toString()"
															},
															"textAttributes": {
																"size": 14,
																"weight": "MEDIUM",
																"color": "#333333"
															},
															"type": "RICH_TEXT",
															"children": [{
																"markdown": {
																	"type": "EXPRESSION",
																	"expression": "RecipeDetailsPageState.servingsState > 1 ? ' Portionen' : ' Portion'"
																},
																"textAttributes": {
																	"size": 14,
																	"weight": "MEDIUM",
																	"color": "#333333"
																},
																"type": "RICH_TEXT"
															}]
														}]
													}
												}, {
													"axis": "HORIZONTAL",
													"distribution": "CENTER",
													"width": "25%",
													"type": "STACK",
													"children": [{
														"width": 24,
														"height": null,
														"opacity": {
															"type": "EXPRESSION",
															"expression": "(((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipePortioningContentState.reloadOngoingState || RecipeDetailsPageState.basketModificationOngoingState)) || (RecipeDetailsStepperState.unavailableIngredientInBasketState)) ? 0.5 : 1"
														},
														"accessible": false,
														"hideFromAccessibility": true,
														"type": "CONTAINER",
														"child": {
															"axis": "VERTICAL",
															"alignment": "CENTER",
															"distribution": "CENTER",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"iconKey": "plus",
																"width": 16,
																"height": 16,
																"color": "#333333",
																"type": "ICON"
															}]
														}
													}]
												}]
											}, {
												"absolutePosition": {
													"top": 0,
													"bottom": 0,
													"left": -8,
													"right": -8
												},
												"type": "CONTAINER",
												"child": {
													"width": {
														"type": "EXPRESSION",
														"expression": "(CONTAINER_WIDTH / 2) - 8"
													},
													"type": "CONTAINER",
													"child": {
														"axis": "HORIZONTAL",
														"distribution": "FILL",
														"alignment": "FILL",
														"height": "100%",
														"width": "100%",
														"accessible": false,
														"hideFromAccessibility": true,
														"type": "STACK",
														"children": [{
															"height": "100%",
															"accessible": false,
															"hideFromAccessibility": true,
															"type": "CONTAINER",
															"child": {
																"onPress": {
																	"actionType": "CALLBACK",
																	"callback": {
																		"type": "EXPRESSION",
																		"expression": "() => {\n        if (GlobalState.debounceTimer) {\n          clearTimeout(GlobalState.debounceTimer);\n        }\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        \n        const isRecipeAlreadyInBasket = RecipeDetailsStepperState.recipeBasketState === 'ADDED';\n        const shouldRemoveRecipeFromBasket = ((true && RecipeDetailsPageState.servingsState - 1 < 1));\n        const oldServingSize = RecipeDetailsPageState.servingsState;\n        const newServingSize = false\n          ? RecipeDetailsPageState.servingsState >= 24 \n            ? 24 \n            : RecipeDetailsPageState.servingsState + 1\n          : RecipeDetailsPageState.servingsState <= 1 \n            ? 1 \n            : RecipeDetailsPageState.servingsState - 1;\n            \n        if (newServingSize !== oldServingSize) {\n          RecipeDetailsPageState.servingsState = newServingSize;\n        }\n            \n        GlobalState.debounceTimer = setTimeout(() => {\n          GlobalState.debounceTimer = 0;\n          RecipePortioningContentState.reloadOngoingState = true;\n          onPMLAction({\n            \"actionType\": \"RELOAD\",\n            \"suspenseId\": \"recipe-portioning-content-suspense-id-66864e469a2ba07f8c321c8b\",\n            \"pageConfig\": {\n              \"id\": \"recipe-portioning-content\",\n              \"parameters\": { \"recipe_id\": '66864e469a2ba07f8c321c8b', \"servings\": newServingSize }\n            },\n            \"onError\": {\n              \"actionType\": \"CALLBACK\",\n              \"callback\": () => {\n                RecipeDetailsPageState.servingsState = oldServingSize;\n                RecipePortioningContentState.reloadOngoingState = false;\n                onPMLAction({\n                  \"actionType\": \"EVENT\",\n                  \"action\": {\n                    \"type\": \"TOAST\",\n                    \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                  }\n                });\n              }\n            }\n          });\n  \n          if (isRecipeAlreadyInBasket) {\n            RecipeDetailsPageState.basketModificationOngoingState = true;\n            if (shouldRemoveRecipeFromBasket) { \n              onPMLAction({\n                \"actionType\": \"ENDPOINT\",\n                \"method\": \"post\",\n                \"url\": 'pages/task/remove-recipe-from-day',\n                \"body\": {\n                  \"payload\": {\n                    \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                    \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n                  }\n                },\n                \"onSuccess\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": (resp) => {\n                    \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                    RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    RecipeDetailsStepperState.unavailableIngredientInBasketState = false;\n                    const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                    const analyticsContexts = getMealsUnavailabilityAnalytics(\n                      '66864e469a2ba07f8c321c8b',\n                      undefined,\n                      undefined,\n                      RecipeDetailsStepperState.dayOffsetState,\n                      0,\n                      'RDP',\n                      'REMOVE'\n                    )\n                    onPMLAction(\n                      {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                      analyticsContexts\n                    );\n                  }\n                },\n                \"onError\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": () => {\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    onPMLAction({\n                      \"actionType\": \"EVENT\",\n                      \"action\": {\n                        \"type\": \"TOAST\",\n                        \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                      }\n                    });\n                  }\n                }\n              })\n            } else {\n              onPMLAction({\n                \"actionType\": \"ENDPOINT\",\n                \"method\": \"post\",\n                \"url\": 'pages/task/update-number-of-portions-task',\n                \"body\": {\n                  \"payload\": {\n                    \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                    \"day_offset\": RecipeDetailsStepperState.dayOffsetState,\n                    \"portions\": newServingSize\n                  }\n                },\n                \"onSuccess\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": (resp) => {\n                    \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    RecipeDetailsStepperState.unavailableIngredientInBasketState  = resp.anyUnavailableIngredient;\n                    const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                    const analyticsContexts = getMealsUnavailabilityAnalytics(\n                      '66864e469a2ba07f8c321c8b',\n                      resp.anyUnavailableIngredient,\n                      resp.unAvailableIngredients,\n                      RecipeDetailsStepperState.dayOffsetState,\n                      newServingSize,\n                      'RDP',\n                      'REMOVE'\n                    )\n                    onPMLAction(\n                      {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                      analyticsContexts\n                    );\n                  }\n                },\n                \"onError\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": () => {\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    onPMLAction({\n                      \"actionType\": \"EVENT\",\n                      \"action\": {\n                        \"type\": \"TOAST\",\n                        \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                      }\n                    });\n                  }\n                }\n              });\n            }\n          }\n        }, 500);\n      }"
																	}
																},
																"disabled": {
																	"type": "EXPRESSION",
																	"expression": "((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipePortioningContentState.reloadOngoingState || RecipeDetailsPageState.basketModificationOngoingState))"
																},
																"type": "TOUCHABLE",
																"child": {
																	"height": "100%",
																	"width": "100%",
																	"type": "CONTAINER",
																	"child": {
																		"type": "CONTAINER",
																		"child": null
																	}
																}
															}
														}, {
															"height": "100%",
															"accessible": false,
															"hideFromAccessibility": true,
															"type": "CONTAINER",
															"child": {
																"onPress": {
																	"actionType": "CALLBACK",
																	"callback": {
																		"type": "EXPRESSION",
																		"expression": "() => {\n        if (GlobalState.debounceTimer) {\n          clearTimeout(GlobalState.debounceTimer);\n        }\n        onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n        \n        const isRecipeAlreadyInBasket = RecipeDetailsStepperState.recipeBasketState === 'ADDED';\n        const shouldRemoveRecipeFromBasket = ((false && RecipeDetailsPageState.servingsState - 1 < 1));\n        const oldServingSize = RecipeDetailsPageState.servingsState;\n        const newServingSize = true\n          ? RecipeDetailsPageState.servingsState >= 24 \n            ? 24 \n            : RecipeDetailsPageState.servingsState + 1\n          : RecipeDetailsPageState.servingsState <= 1 \n            ? 1 \n            : RecipeDetailsPageState.servingsState - 1;\n            \n        if (newServingSize !== oldServingSize) {\n          RecipeDetailsPageState.servingsState = newServingSize;\n        }\n            \n        GlobalState.debounceTimer = setTimeout(() => {\n          GlobalState.debounceTimer = 0;\n          RecipePortioningContentState.reloadOngoingState = true;\n          onPMLAction({\n            \"actionType\": \"RELOAD\",\n            \"suspenseId\": \"recipe-portioning-content-suspense-id-66864e469a2ba07f8c321c8b\",\n            \"pageConfig\": {\n              \"id\": \"recipe-portioning-content\",\n              \"parameters\": { \"recipe_id\": '66864e469a2ba07f8c321c8b', \"servings\": newServingSize }\n            },\n            \"onError\": {\n              \"actionType\": \"CALLBACK\",\n              \"callback\": () => {\n                RecipeDetailsPageState.servingsState = oldServingSize;\n                RecipePortioningContentState.reloadOngoingState = false;\n                onPMLAction({\n                  \"actionType\": \"EVENT\",\n                  \"action\": {\n                    \"type\": \"TOAST\",\n                    \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                  }\n                });\n              }\n            }\n          });\n  \n          if (isRecipeAlreadyInBasket) {\n            RecipeDetailsPageState.basketModificationOngoingState = true;\n            if (shouldRemoveRecipeFromBasket) { \n              onPMLAction({\n                \"actionType\": \"ENDPOINT\",\n                \"method\": \"post\",\n                \"url\": 'pages/task/remove-recipe-from-day',\n                \"body\": {\n                  \"payload\": {\n                    \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                    \"day_offset\": RecipeDetailsStepperState.dayOffsetState\n                  }\n                },\n                \"onSuccess\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": (resp) => {\n                    \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                    RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE'\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    RecipeDetailsStepperState.unavailableIngredientInBasketState = false;\n                    const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                    const analyticsContexts = getMealsUnavailabilityAnalytics(\n                      '66864e469a2ba07f8c321c8b',\n                      undefined,\n                      undefined,\n                      RecipeDetailsStepperState.dayOffsetState,\n                      0,\n                      'RDP',\n                      'ADD'\n                    )\n                    onPMLAction(\n                      {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                      analyticsContexts\n                    );\n                  }\n                },\n                \"onError\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": () => {\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    onPMLAction({\n                      \"actionType\": \"EVENT\",\n                      \"action\": {\n                        \"type\": \"TOAST\",\n                        \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                      }\n                    });\n                  }\n                }\n              })\n            } else {\n              onPMLAction({\n                \"actionType\": \"ENDPOINT\",\n                \"method\": \"post\",\n                \"url\": 'pages/task/update-number-of-portions-task',\n                \"body\": {\n                  \"payload\": {\n                    \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                    \"day_offset\": RecipeDetailsStepperState.dayOffsetState,\n                    \"portions\": newServingSize\n                  }\n                },\n                \"onSuccess\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": (resp) => {\n                    \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    RecipeDetailsStepperState.unavailableIngredientInBasketState  = resp.anyUnavailableIngredient;\n                    const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                    const analyticsContexts = getMealsUnavailabilityAnalytics(\n                      '66864e469a2ba07f8c321c8b',\n                      resp.anyUnavailableIngredient,\n                      resp.unAvailableIngredients,\n                      RecipeDetailsStepperState.dayOffsetState,\n                      newServingSize,\n                      'RDP',\n                      'ADD'\n                    )\n                    onPMLAction(\n                      {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                      analyticsContexts\n                    );\n                  }\n                },\n                \"onError\": {\n                  \"actionType\": \"CALLBACK\",\n                  \"callback\": () => {\n                    RecipeDetailsPageState.basketModificationOngoingState = false;\n                    onPMLAction({\n                      \"actionType\": \"EVENT\",\n                      \"action\": {\n                        \"type\": \"TOAST\",\n                        \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                      }\n                    });\n                  }\n                }\n              });\n            }\n          }\n        }, 500);\n      }"
																	}
																},
																"disabled": {
																	"type": "EXPRESSION",
																	"expression": "(((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipePortioningContentState.reloadOngoingState || RecipeDetailsPageState.basketModificationOngoingState)) || (RecipeDetailsStepperState.unavailableIngredientInBasketState))"
																},
																"type": "TOUCHABLE",
																"child": {
																	"height": "100%",
																	"width": "100%",
																	"type": "CONTAINER",
																	"child": {
																		"type": "CONTAINER",
																		"child": null
																	}
																}
															}
														}]
													}
												}
											}, {
												"width": {
													"type": "EXPRESSION",
													"expression": "(CONTAINER_WIDTH / 2) - 8"
												},
												"axis": "VERTICAL",
												"alignment": "CENTER",
												"distribution": "CENTER",
												"accessible": false,
												"type": "STACK",
												"children": [{
													"onPress": {
														"actionType": "CALLBACK",
														"callback": {
															"type": "EXPRESSION",
															"expression": "() => {\n          const isRecipeAlreadyInBasket = RecipeDetailsStepperState.recipeBasketState === 'ADDED';\n          \n          if (isRecipeAlreadyInBasket) { \n            onPMLAction({\n              \"actionType\": 'OPEN',\n              \"target\": `app.picnic://store/page;id=meals-planner-day-bottom-sheet,presentation-mode=MODAL_OVER_CONTEXT,type=STATIC&recipeId=66864e469a2ba07f8c321c8b&start_date=2025-01-11T01%3A00%3A00.000&origin=rdp&portions=${RecipeDetailsPageState.servingsState}&day_offset=${RecipeDetailsStepperState.dayOffsetState}`\n            }) \n          } else {\n            RecipeDetailsPageState.basketModificationOngoingState = true;\n              onPMLAction({\n            \"actionType\": \"HAPTIC_FEEDBACK\",\n            \"hapticActions\": [\n              {\n                \"method\": \"impactMedium\"\n              }\n            ]\n          });\n            onPMLAction({\n              \"actionType\": \"ENDPOINT\",\n              \"method\": \"post\",\n              \"url\": 'pages/task/assign-recipe-to-day',\n              \"body\": {\n                \"payload\": {\n                  \"recipe_id\": '66864e469a2ba07f8c321c8b',\n                  \"portions\": RecipeDetailsPageState.servingsState,\n                  \"day_offset\": RecipeDetailsStepperState.dayOffsetState,\n                  \"core_ingredients\": RecipePortioningContentState.coreIngredientsState\n                }\n              },\n              \"onSuccess\": {\n                \"actionType\": \"CALLBACK\",\n                \"callback\": (resp) => {\n                  \n    if (resp && resp?.cart) {\n      onPMLAction({\n        operationId: undefined,\n        actionType: \"SET_CART\",\n        cart: resp.cart\n      })\n    } else {\n      onPMLAction({\n        actionType: \"EVENT\",\n        action: { \n          \"type\": \"REFRESH\",\n          \"source\": \"CART\",\n        }\n      })\n    }\n  \n                  RecipeDetailsStepperState.recipeBasketState = 'ADDED';\n                  RecipeDetailsStepperState.dayOffsetState = Number(resp.dayRelativeToSlot);\n                  RecipeDetailsPageState.basketModificationOngoingState = false;\n                  RecipeDetailsStepperState.unavailableIngredientInBasketState = resp.anyUnavailableIngredient;\n                  const getMealsUnavailabilityAnalytics = (\n  recipeId,\n  unavailability,\n  unavailableIngredient,\n  dayRelativeToSlot,\n  portions,\n  origin,\n  portions_action,\n  group_type,\n  maturity_segment\n) => {\n  const contexts = [\n    {\n        schema: 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0',\n        data: {\n          recipe_id: recipeId,\n          day_relative_to_slot: Number(dayRelativeToSlot),\n          portions: portions\n        }\n    },\n    {\n      schema: 'iglu:tech.picnic.snowplow.analytics/pml_component/jsonschema/1-1-0',\n      data: {\n        type: portions_action ? 'recipe-tile-portions-stepper' : 'recipe-tile-add-button',\n        template_id: origin\n      }\n    }\n  ];\n\n  if(group_type && maturity_segment) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/meals_customer_segment/jsonschema/1-0-0',\n      data: {\n        group_type: group_type,\n        maturity_segment: maturity_segment\n      }\n    });\n  }\n\n  if(portions_action !== undefined) {\n    contexts.find(context => context.schema === 'iglu:tech.picnic.snowplow.analytics/recipe/jsonschema/1-3-0').data.portions_action = portions_action;\n  }\n\n  if(unavailability) {\n    contexts.push({\n      schema: 'iglu:tech.picnic.snowplow.analytics/bulk_unavailability/jsonschema/1-0-0',\n      data: {\n        unavailable_products: unavailableIngredient\n      }\n    });\n  }\n  return contexts;\n}\n                  const analyticsContexts = getMealsUnavailabilityAnalytics(\n                    '66864e469a2ba07f8c321c8b',\n                    resp.anyUnavailableIngredient,\n                    resp.unAvailableIngredients,\n                    RecipeDetailsStepperState.dayOffsetState,\n                    RecipeDetailsPageState.servingsState,\n                    'RDP'\n                  )\n                  onPMLAction(\n                    {\"actionType\": \"CALLBACK\",\"callback\": () => {return}},\n                    analyticsContexts\n                  );\n                }\n              },\n              \"onError\": {\n                \"actionType\": \"CALLBACK\",\n                \"callback\": () => {\n                  RecipeDetailsStepperState.recipeBasketState = 'AVAILABLE';\n                  RecipeDetailsPageState.basketModificationOngoingState = false;\n                  onPMLAction({\n                    \"actionType\": \"EVENT\",\n                    \"action\": {\n                      \"type\": \"TOAST\",\n                      \"message\": \"Sorry, etwas ist schiefgegangen. Bitte versuche es noch mal.\" \n                    }\n                  })\n                }\n              }\n            })\n          }\n        }"
														}
													},
													"disabled": {
														"type": "EXPRESSION",
														"expression": "((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipePortioningContentState.reloadOngoingState || RecipeDetailsPageState.basketModificationOngoingState))"
													},
													"type": "TOUCHABLE",
													"child": {
														"backgroundColor": {
															"type": "EXPRESSION",
															"expression": "((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipeDetailsStepperState.recipeBasketState === 'ADDED')) ? '#fcfaf9' : '#295813'"
														},
														"borderWidth": {
															"type": "EXPRESSION",
															"expression": "((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipeDetailsStepperState.recipeBasketState === 'ADDED')) ? 1 : 0"
														},
														"borderColor": {
															"type": "EXPRESSION",
															"expression": "((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipeDetailsStepperState.recipeBasketState === 'ADDED'))? 'rgba(0, 0, 0, 0.1)' : '#000000'"
														},
														"borderRadius": 8,
														"width": {
															"type": "EXPRESSION",
															"expression": "(CONTAINER_WIDTH / 2) - 16"
														},
														"height": "100%",
														"opacity": {
															"type": "EXPRESSION",
															"expression": "((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipePortioningContentState.reloadOngoingState || RecipeDetailsPageState.basketModificationOngoingState)) ? 0.5 : 1"
														},
														"type": "CONTAINER",
														"child": {
															"axis": "HORIZONTAL",
															"height": "100%",
															"type": "STACK",
															"children": [{
																"axis": "HORIZONTAL",
																"height": "100%",
																"width": "100%",
																"alignment": "CENTER",
																"alignContent": "CENTER",
																"distribution": "CENTER",
																"type": "STACK",
																"children": [{
																	"textAlignment": "CENTER",
																	"textAttributes": {
																		"size": 14,
																		"weight": "MEDIUM",
																		"color": {
																			"type": "EXPRESSION",
																			"expression": "((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipeDetailsStepperState.recipeBasketState === 'ADDED')) ? '#295813' : RecipeDetailsStepperState.recipeBasketState === 'AVAILABLE' ? '#ffffff' : '#333333'"
																		}
																	},
																	"markdown": {
																		"type": "EXPRESSION",
																		"expression": "((RecipeDetailsStepperState.recipeBasketState === 'ORDERED') || (RecipeDetailsStepperState.recipeBasketState === 'ADDED')) ? JSON.parse('{\"0\":\"Samstag\",\"1\":\"Sonntag\",\"2\":\"Montag\",\"3\":\"Dienstag\",\"4\":\"Mittwoch\",\"5\":\"Donnerstag\",\"6\":\"Freitag\"}')[RecipeDetailsStepperState.dayOffsetState % Object.keys(JSON.parse('{\"0\":\"Samstag\",\"1\":\"Sonntag\",\"2\":\"Montag\",\"3\":\"Dienstag\",\"4\":\"Mittwoch\",\"5\":\"Donnerstag\",\"6\":\"Freitag\"}')).length] : RecipeDetailsStepperState.recipeBasketState === 'AVAILABLE' ? 'Hinzufügen' : 'Zurzeit nicht lieferbar'"
																	},
																	"type": "RICH_TEXT"
																}]
															}]
														}
													}
												}]
											}]
										}
									}]
								}
							}
						}
					},
					"type": "SUSPENSE",
					"pageConfig": {
						"id": "recipe-details-stepper",
						"parameters": {
							"recipe_id": "66864e469a2ba07f8c321c8b",
							"is_portioning_enabled": true,
							"day_offset": null,
							"is_ordered": false
						}
					},
					"loadingConfig": null,
					"errorConfig": null
				}]
			}
		}
	}
}